// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3StorageConfiguration s3 storage configuration
//
// swagger:model S3StorageConfiguration
type S3StorageConfiguration struct {

	// access key id
	// Required: true
	AccessKeyID *string `json:"access_key_id"`

	// disable s s l
	// Required: true
	DisableSSL *string `json:"disableSSL"`

	// endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// force path style
	// Required: true
	ForcePathStyle *string `json:"force_path_style"`

	// region
	// Required: true
	Region *string `json:"region"`

	// secret access key
	// Required: true
	SecretAccessKey *string `json:"secret_access_key"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *S3StorageConfiguration) UnmarshalJSON(data []byte) error {
	var props struct {

		// access key id
		// Required: true
		AccessKeyID *string `json:"access_key_id"`

		// disable s s l
		// Required: true
		DisableSSL *string `json:"disableSSL"`

		// endpoint
		// Required: true
		Endpoint *string `json:"endpoint"`

		// force path style
		// Required: true
		ForcePathStyle *string `json:"force_path_style"`

		// region
		// Required: true
		Region *string `json:"region"`

		// secret access key
		// Required: true
		SecretAccessKey *string `json:"secret_access_key"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AccessKeyID = props.AccessKeyID
	m.DisableSSL = props.DisableSSL
	m.Endpoint = props.Endpoint
	m.ForcePathStyle = props.ForcePathStyle
	m.Region = props.Region
	m.SecretAccessKey = props.SecretAccessKey
	return nil
}

// Validate validates this s3 storage configuration
func (m *S3StorageConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableSSL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForcePathStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3StorageConfiguration) validateAccessKeyID(formats strfmt.Registry) error {

	if err := validate.Required("access_key_id", "body", m.AccessKeyID); err != nil {
		return err
	}

	return nil
}

func (m *S3StorageConfiguration) validateDisableSSL(formats strfmt.Registry) error {

	if err := validate.Required("disableSSL", "body", m.DisableSSL); err != nil {
		return err
	}

	return nil
}

func (m *S3StorageConfiguration) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *S3StorageConfiguration) validateForcePathStyle(formats strfmt.Registry) error {

	if err := validate.Required("force_path_style", "body", m.ForcePathStyle); err != nil {
		return err
	}

	return nil
}

func (m *S3StorageConfiguration) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *S3StorageConfiguration) validateSecretAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("secret_access_key", "body", m.SecretAccessKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 storage configuration based on context it is used
func (m *S3StorageConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3StorageConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3StorageConfiguration) UnmarshalBinary(b []byte) error {
	var res S3StorageConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
