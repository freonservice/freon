// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageConfiguration storage configuration
//
// swagger:model StorageConfiguration
type StorageConfiguration struct {

	// s3 storage conf
	S3StorageConf *S3StorageConfiguration `json:"s3_storage_conf,omitempty"`

	// use
	// Required: true
	Use *int32 `json:"use"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *StorageConfiguration) UnmarshalJSON(data []byte) error {
	var props struct {

		// s3 storage conf
		S3StorageConf *S3StorageConfiguration `json:"s3_storage_conf,omitempty"`

		// use
		// Required: true
		Use *int32 `json:"use"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.S3StorageConf = props.S3StorageConf
	m.Use = props.Use
	return nil
}

// Validate validates this storage configuration
func (m *StorageConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateS3StorageConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageConfiguration) validateS3StorageConf(formats strfmt.Registry) error {
	if swag.IsZero(m.S3StorageConf) { // not required
		return nil
	}

	if m.S3StorageConf != nil {
		if err := m.S3StorageConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3_storage_conf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3_storage_conf")
			}
			return err
		}
	}

	return nil
}

func (m *StorageConfiguration) validateUse(formats strfmt.Registry) error {

	if err := validate.Required("use", "body", m.Use); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage configuration based on the context it is used
func (m *StorageConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateS3StorageConf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageConfiguration) contextValidateS3StorageConf(ctx context.Context, formats strfmt.Registry) error {

	if m.S3StorageConf != nil {
		if err := m.S3StorageConf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3_storage_conf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3_storage_conf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageConfiguration) UnmarshalBinary(b []byte) error {
	var res StorageConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
