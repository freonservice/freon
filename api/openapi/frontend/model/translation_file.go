// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TranslationFile translation file
//
// swagger:model TranslationFile
type TranslationFile struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// path
	// Required: true
	Path *string `json:"path"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// status
	Status string `json:"status,omitempty"`

	// storage type
	// Required: true
	// Enum: [local]
	StorageType *string `json:"storage_type"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *TranslationFile) UnmarshalJSON(data []byte) error {
	var props struct {

		// id
		// Required: true
		ID *int64 `json:"id"`

		// name
		// Required: true
		Name *string `json:"name"`

		// path
		// Required: true
		Path *string `json:"path"`

		// platform
		// Required: true
		Platform *string `json:"platform"`

		// status
		Status string `json:"status,omitempty"`

		// storage type
		// Required: true
		// Enum: [local]
		StorageType *string `json:"storage_type"`

		// created at
		// Required: true
		CreatedAt *int64 `json:"created_at"`

		// updated at
		// Required: true
		UpdatedAt *int64 `json:"updated_at"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ID = props.ID
	m.Name = props.Name
	m.Path = props.Path
	m.Platform = props.Platform
	m.Status = props.Status
	m.StorageType = props.StorageType
	m.CreatedAt = props.CreatedAt
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this translation file
func (m *TranslationFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TranslationFile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TranslationFile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TranslationFile) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *TranslationFile) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

var translationFileTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		translationFileTypeStorageTypePropEnum = append(translationFileTypeStorageTypePropEnum, v)
	}
}

const (

	// TranslationFileStorageTypeLocal captures enum value "local"
	TranslationFileStorageTypeLocal string = "local"
)

// prop value enum
func (m *TranslationFile) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, translationFileTypeStorageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TranslationFile) validateStorageType(formats strfmt.Registry) error {

	if err := validate.Required("storage_type", "body", m.StorageType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStorageTypeEnum("storage_type", "body", *m.StorageType); err != nil {
		return err
	}

	return nil
}

func (m *TranslationFile) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *TranslationFile) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TranslationFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TranslationFile) UnmarshalBinary(b []byte) error {
	var res TranslationFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
