// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Version version
//
// swagger:model Version
type Version struct {

	// localization
	// Required: true
	Localization *Localization `json:"localization"`

	// platform
	Platform int64 `json:"platform,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Version) UnmarshalJSON(data []byte) error {
	var props struct {

		// localization
		// Required: true
		Localization *Localization `json:"localization"`

		// platform
		Platform int64 `json:"platform,omitempty"`

		// path
		Path string `json:"path,omitempty"`

		// updated at
		// Required: true
		UpdatedAt *int64 `json:"updated_at"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Localization = props.Localization
	m.Platform = props.Platform
	m.Path = props.Path
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this version
func (m *Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Version) validateLocalization(formats strfmt.Registry) error {

	if err := validate.Required("localization", "body", m.Localization); err != nil {
		return err
	}

	if m.Localization != nil {
		if err := m.Localization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localization")
			}
			return err
		}
	}

	return nil
}

func (m *Version) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Version) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Version) UnmarshalBinary(b []byte) error {
	var res Version
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
