// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/freonservice/freon/internal/app"
)

// CreateIdentifierHandlerFunc turns a function with the right signature into a create identifier handler
type CreateIdentifierHandlerFunc func(CreateIdentifierParams, *app.UserSession) CreateIdentifierResponder

// Handle executing the request and returning a response
func (fn CreateIdentifierHandlerFunc) Handle(params CreateIdentifierParams, principal *app.UserSession) CreateIdentifierResponder {
	return fn(params, principal)
}

// CreateIdentifierHandler interface for that can handle valid create identifier params
type CreateIdentifierHandler interface {
	Handle(CreateIdentifierParams, *app.UserSession) CreateIdentifierResponder
}

// NewCreateIdentifier creates a new http.Handler for the create identifier operation
func NewCreateIdentifier(ctx *middleware.Context, handler CreateIdentifierHandler) *CreateIdentifier {
	return &CreateIdentifier{Context: ctx, Handler: handler}
}

/*CreateIdentifier swagger:route POST /identifier createIdentifier

create new identifier

*/
type CreateIdentifier struct {
	Context *middleware.Context
	Handler CreateIdentifierHandler
}

func (o *CreateIdentifier) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateIdentifierParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateIdentifierBody create identifier body
//
// swagger:model CreateIdentifierBody
type CreateIdentifierBody struct {

	// category id
	CategoryID int64 `json:"category_id,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// example text
	ExampleText string `json:"example_text,omitempty"`

	// name
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Name *string `json:"name"`

	// parent id
	ParentID int64 `json:"parent_id,omitempty"`

	// platforms
	Platforms []string `json:"platforms"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *CreateIdentifierBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// category id
		CategoryID int64 `json:"category_id,omitempty"`

		// description
		Description string `json:"description,omitempty"`

		// example text
		ExampleText string `json:"example_text,omitempty"`

		// name
		// Required: true
		// Max Length: 255
		// Min Length: 1
		Name *string `json:"name"`

		// parent id
		ParentID int64 `json:"parent_id,omitempty"`

		// platforms
		Platforms []string `json:"platforms"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.CategoryID = props.CategoryID
	o.Description = props.Description
	o.ExampleText = props.ExampleText
	o.Name = props.Name
	o.ParentID = props.ParentID
	o.Platforms = props.Platforms
	return nil
}

// Validate validates this create identifier body
func (o *CreateIdentifierBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateIdentifierBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"name", "body", string(*o.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("args"+"."+"name", "body", string(*o.Name), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateIdentifierBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateIdentifierBody) UnmarshalBinary(b []byte) error {
	var res CreateIdentifierBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
