// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/freonservice/freon/internal/app"
)

// CreateTranslationHandlerFunc turns a function with the right signature into a create translation handler
type CreateTranslationHandlerFunc func(CreateTranslationParams, *app.UserSession) CreateTranslationResponder

// Handle executing the request and returning a response
func (fn CreateTranslationHandlerFunc) Handle(params CreateTranslationParams, principal *app.UserSession) CreateTranslationResponder {
	return fn(params, principal)
}

// CreateTranslationHandler interface for that can handle valid create translation params
type CreateTranslationHandler interface {
	Handle(CreateTranslationParams, *app.UserSession) CreateTranslationResponder
}

// NewCreateTranslation creates a new http.Handler for the create translation operation
func NewCreateTranslation(ctx *middleware.Context, handler CreateTranslationHandler) *CreateTranslation {
	return &CreateTranslation{Context: ctx, Handler: handler}
}

/* CreateTranslation swagger:route POST /translation createTranslation

create new translation

*/
type CreateTranslation struct {
	Context *middleware.Context
	Handler CreateTranslationHandler
}

func (o *CreateTranslation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateTranslationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateTranslationBody create translation body
//
// swagger:model CreateTranslationBody
type CreateTranslationBody struct {

	// identifier id
	// Required: true
	IdentifierID *int64 `json:"identifier_id"`

	// localization id
	// Required: true
	LocalizationID *int64 `json:"localization_id"`

	// plural
	Plural string `json:"plural,omitempty"`

	// singular
	// Required: true
	Singular *string `json:"singular"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *CreateTranslationBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// identifier id
		// Required: true
		IdentifierID *int64 `json:"identifier_id"`

		// localization id
		// Required: true
		LocalizationID *int64 `json:"localization_id"`

		// plural
		Plural string `json:"plural,omitempty"`

		// singular
		// Required: true
		Singular *string `json:"singular"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.IdentifierID = props.IdentifierID
	o.LocalizationID = props.LocalizationID
	o.Plural = props.Plural
	o.Singular = props.Singular
	return nil
}

// Validate validates this create translation body
func (o *CreateTranslationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIdentifierID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocalizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSingular(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateTranslationBody) validateIdentifierID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"identifier_id", "body", o.IdentifierID); err != nil {
		return err
	}

	return nil
}

func (o *CreateTranslationBody) validateLocalizationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"localization_id", "body", o.LocalizationID); err != nil {
		return err
	}

	return nil
}

func (o *CreateTranslationBody) validateSingular(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"singular", "body", o.Singular); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create translation body based on context it is used
func (o *CreateTranslationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateTranslationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateTranslationBody) UnmarshalBinary(b []byte) error {
	var res CreateTranslationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
