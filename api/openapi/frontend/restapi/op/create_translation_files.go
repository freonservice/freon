// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/freonservice/freon/internal/app"
)

// CreateTranslationFilesHandlerFunc turns a function with the right signature into a create translation files handler
type CreateTranslationFilesHandlerFunc func(CreateTranslationFilesParams, *app.UserSession) CreateTranslationFilesResponder

// Handle executing the request and returning a response
func (fn CreateTranslationFilesHandlerFunc) Handle(params CreateTranslationFilesParams, principal *app.UserSession) CreateTranslationFilesResponder {
	return fn(params, principal)
}

// CreateTranslationFilesHandler interface for that can handle valid create translation files params
type CreateTranslationFilesHandler interface {
	Handle(CreateTranslationFilesParams, *app.UserSession) CreateTranslationFilesResponder
}

// NewCreateTranslationFiles creates a new http.Handler for the create translation files operation
func NewCreateTranslationFiles(ctx *middleware.Context, handler CreateTranslationFilesHandler) *CreateTranslationFiles {
	return &CreateTranslationFiles{Context: ctx, Handler: handler}
}

/*CreateTranslationFiles swagger:route POST /translation/files createTranslationFiles

create translation files for one localization (language) and different platforms (ios,android,web)

*/
type CreateTranslationFiles struct {
	Context *middleware.Context
	Handler CreateTranslationFilesHandler
}

func (o *CreateTranslationFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateTranslationFilesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateTranslationFilesBody create translation files body
//
// swagger:model CreateTranslationFilesBody
type CreateTranslationFilesBody struct {

	// localization id
	// Required: true
	LocalizationID *int64 `json:"localization_id"`

	// platforms
	// Required: true
	Platforms []string `json:"platforms"`

	// storage type
	// Enum: [local]
	StorageType *string `json:"storage_type,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *CreateTranslationFilesBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// localization id
		// Required: true
		LocalizationID *int64 `json:"localization_id"`

		// platforms
		// Required: true
		Platforms []string `json:"platforms"`

		// storage type
		// Enum: [local]
		StorageType *string `json:"storage_type,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.LocalizationID = props.LocalizationID
	o.Platforms = props.Platforms
	o.StorageType = props.StorageType
	return nil
}

// Validate validates this create translation files body
func (o *CreateTranslationFilesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLocalizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateTranslationFilesBody) validateLocalizationID(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"localization_id", "body", o.LocalizationID); err != nil {
		return err
	}

	return nil
}

func (o *CreateTranslationFilesBody) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"platforms", "body", o.Platforms); err != nil {
		return err
	}

	return nil
}

var createTranslationFilesBodyTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTranslationFilesBodyTypeStorageTypePropEnum = append(createTranslationFilesBodyTypeStorageTypePropEnum, v)
	}
}

const (

	// CreateTranslationFilesBodyStorageTypeLocal captures enum value "local"
	CreateTranslationFilesBodyStorageTypeLocal string = "local"
)

// prop value enum
func (o *CreateTranslationFilesBody) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTranslationFilesBodyTypeStorageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateTranslationFilesBody) validateStorageType(formats strfmt.Registry) error {

	if swag.IsZero(o.StorageType) { // not required
		return nil
	}

	// value enum
	if err := o.validateStorageTypeEnum("args"+"."+"storage_type", "body", *o.StorageType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateTranslationFilesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateTranslationFilesBody) UnmarshalBinary(b []byte) error {
	var res CreateTranslationFilesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
