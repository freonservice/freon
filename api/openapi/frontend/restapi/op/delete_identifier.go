// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/internal/app"
)

// DeleteIdentifierHandlerFunc turns a function with the right signature into a delete identifier handler
type DeleteIdentifierHandlerFunc func(DeleteIdentifierParams, *app.UserSession) DeleteIdentifierResponder

// Handle executing the request and returning a response
func (fn DeleteIdentifierHandlerFunc) Handle(params DeleteIdentifierParams, principal *app.UserSession) DeleteIdentifierResponder {
	return fn(params, principal)
}

// DeleteIdentifierHandler interface for that can handle valid delete identifier params
type DeleteIdentifierHandler interface {
	Handle(DeleteIdentifierParams, *app.UserSession) DeleteIdentifierResponder
}

// NewDeleteIdentifier creates a new http.Handler for the delete identifier operation
func NewDeleteIdentifier(ctx *middleware.Context, handler DeleteIdentifierHandler) *DeleteIdentifier {
	return &DeleteIdentifier{Context: ctx, Handler: handler}
}

/* DeleteIdentifier swagger:route DELETE /identifier/{id} deleteIdentifier

delete identifier by id only if he dosent use in localizations otherwise error

*/
type DeleteIdentifier struct {
	Context *middleware.Context
	Handler DeleteIdentifierHandler
}

func (o *DeleteIdentifier) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteIdentifierParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
