// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/internal/app"
)

// DeleteLocalizationHandlerFunc turns a function with the right signature into a delete localization handler
type DeleteLocalizationHandlerFunc func(DeleteLocalizationParams, *app.UserSession) DeleteLocalizationResponder

// Handle executing the request and returning a response
func (fn DeleteLocalizationHandlerFunc) Handle(params DeleteLocalizationParams, principal *app.UserSession) DeleteLocalizationResponder {
	return fn(params, principal)
}

// DeleteLocalizationHandler interface for that can handle valid delete localization params
type DeleteLocalizationHandler interface {
	Handle(DeleteLocalizationParams, *app.UserSession) DeleteLocalizationResponder
}

// NewDeleteLocalization creates a new http.Handler for the delete localization operation
func NewDeleteLocalization(ctx *middleware.Context, handler DeleteLocalizationHandler) *DeleteLocalization {
	return &DeleteLocalization{Context: ctx, Handler: handler}
}

/*DeleteLocalization swagger:route DELETE /localization/{id} deleteLocalization

delete localization by id

*/
type DeleteLocalization struct {
	Context *middleware.Context
	Handler DeleteLocalizationHandler
}

func (o *DeleteLocalization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteLocalizationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
