// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freonservice/freon/internal/app"
)

// NewFreonFrontendAPI creates a new FreonFrontend instance
func NewFreonFrontendAPI(spec *loads.Document) *FreonFrontendAPI {
	return &FreonFrontendAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CreateCategoryHandler: CreateCategoryHandlerFunc(func(params CreateCategoryParams, principal *app.UserSession) CreateCategoryResponder {
			return CreateCategoryNotImplemented()
		}),
		CreateIdentifierHandler: CreateIdentifierHandlerFunc(func(params CreateIdentifierParams, principal *app.UserSession) CreateIdentifierResponder {
			return CreateIdentifierNotImplemented()
		}),
		CreateLocalizationHandler: CreateLocalizationHandlerFunc(func(params CreateLocalizationParams, principal *app.UserSession) CreateLocalizationResponder {
			return CreateLocalizationNotImplemented()
		}),
		CreateTranslationHandler: CreateTranslationHandlerFunc(func(params CreateTranslationParams, principal *app.UserSession) CreateTranslationResponder {
			return CreateTranslationNotImplemented()
		}),
		CreateTranslationFilesHandler: CreateTranslationFilesHandlerFunc(func(params CreateTranslationFilesParams, principal *app.UserSession) CreateTranslationFilesResponder {
			return CreateTranslationFilesNotImplemented()
		}),
		DeleteCategoryHandler: DeleteCategoryHandlerFunc(func(params DeleteCategoryParams, principal *app.UserSession) DeleteCategoryResponder {
			return DeleteCategoryNotImplemented()
		}),
		DeleteIdentifierHandler: DeleteIdentifierHandlerFunc(func(params DeleteIdentifierParams, principal *app.UserSession) DeleteIdentifierResponder {
			return DeleteIdentifierNotImplemented()
		}),
		DeleteLocalizationHandler: DeleteLocalizationHandlerFunc(func(params DeleteLocalizationParams, principal *app.UserSession) DeleteLocalizationResponder {
			return DeleteLocalizationNotImplemented()
		}),
		DeleteTranslationHandler: DeleteTranslationHandlerFunc(func(params DeleteTranslationParams, principal *app.UserSession) DeleteTranslationResponder {
			return DeleteTranslationNotImplemented()
		}),
		DeleteTranslationFileHandler: DeleteTranslationFileHandlerFunc(func(params DeleteTranslationFileParams, principal *app.UserSession) DeleteTranslationFileResponder {
			return DeleteTranslationFileNotImplemented()
		}),
		HealthCheckHandler: HealthCheckHandlerFunc(func(params HealthCheckParams) HealthCheckResponder {
			return HealthCheckNotImplemented()
		}),
		InfoHandler: InfoHandlerFunc(func(params InfoParams, principal *app.UserSession) InfoResponder {
			return InfoNotImplemented()
		}),
		ListCategoriesHandler: ListCategoriesHandlerFunc(func(params ListCategoriesParams, principal *app.UserSession) ListCategoriesResponder {
			return ListCategoriesNotImplemented()
		}),
		ListIdentifiersHandler: ListIdentifiersHandlerFunc(func(params ListIdentifiersParams, principal *app.UserSession) ListIdentifiersResponder {
			return ListIdentifiersNotImplemented()
		}),
		ListLocalizationHandler: ListLocalizationHandlerFunc(func(params ListLocalizationParams, principal *app.UserSession) ListLocalizationResponder {
			return ListLocalizationNotImplemented()
		}),
		ListTranslationFilesHandler: ListTranslationFilesHandlerFunc(func(params ListTranslationFilesParams, principal *app.UserSession) ListTranslationFilesResponder {
			return ListTranslationFilesNotImplemented()
		}),
		ListTranslationsHandler: ListTranslationsHandlerFunc(func(params ListTranslationsParams, principal *app.UserSession) ListTranslationsResponder {
			return ListTranslationsNotImplemented()
		}),
		ListUserHandler: ListUserHandlerFunc(func(params ListUserParams, principal *app.UserSession) ListUserResponder {
			return ListUserNotImplemented()
		}),
		LoginHandler: LoginHandlerFunc(func(params LoginParams) LoginResponder {
			return LoginNotImplemented()
		}),
		LogoutUserHandler: LogoutUserHandlerFunc(func(params LogoutUserParams, principal *app.UserSession) LogoutUserResponder {
			return LogoutUserNotImplemented()
		}),
		RegUserHandler: RegUserHandlerFunc(func(params RegUserParams, principal *app.UserSession) RegUserResponder {
			return RegUserNotImplemented()
		}),
		StatisticHandler: StatisticHandlerFunc(func(params StatisticParams, principal *app.UserSession) StatisticResponder {
			return StatisticNotImplemented()
		}),
		StatusTranslationHandler: StatusTranslationHandlerFunc(func(params StatusTranslationParams, principal *app.UserSession) StatusTranslationResponder {
			return StatusTranslationNotImplemented()
		}),
		UpdateCategoryHandler: UpdateCategoryHandlerFunc(func(params UpdateCategoryParams, principal *app.UserSession) UpdateCategoryResponder {
			return UpdateCategoryNotImplemented()
		}),
		UpdateIdentifierHandler: UpdateIdentifierHandlerFunc(func(params UpdateIdentifierParams, principal *app.UserSession) UpdateIdentifierResponder {
			return UpdateIdentifierNotImplemented()
		}),
		UpdateTranslationHandler: UpdateTranslationHandlerFunc(func(params UpdateTranslationParams, principal *app.UserSession) UpdateTranslationResponder {
			return UpdateTranslationNotImplemented()
		}),
		UserChangePasswordHandler: UserChangePasswordHandlerFunc(func(params UserChangePasswordParams, principal *app.UserSession) UserChangePasswordResponder {
			return UserChangePasswordNotImplemented()
		}),
		UserChangeProfileHandler: UserChangeProfileHandlerFunc(func(params UserChangeProfileParams, principal *app.UserSession) UserChangeProfileResponder {
			return UserChangeProfileNotImplemented()
		}),
		UserChangeStatusHandler: UserChangeStatusHandlerFunc(func(params UserChangeStatusParams, principal *app.UserSession) UserChangeStatusResponder {
			return UserChangeStatusNotImplemented()
		}),
		UserMeHandler: UserMeHandlerFunc(func(params UserMeParams, principal *app.UserSession) UserMeResponder {
			return UserMeNotImplemented()
		}),
		VersionHandler: VersionHandlerFunc(func(params VersionParams, principal *app.UserSession) VersionResponder {
			return VersionNotImplemented()
		}),

		// Applies when the "Authorization" header is set
		JWTBearerAuth: func(token string) (*app.UserSession, error) {
			return nil, errors.NotImplemented("api key auth (JWTBearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*FreonFrontendAPI Frontend Server for rest api */
type FreonFrontendAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// JWTBearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	JWTBearerAuth func(string) (*app.UserSession, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CreateCategoryHandler sets the operation handler for the create category operation
	CreateCategoryHandler CreateCategoryHandler
	// CreateIdentifierHandler sets the operation handler for the create identifier operation
	CreateIdentifierHandler CreateIdentifierHandler
	// CreateLocalizationHandler sets the operation handler for the create localization operation
	CreateLocalizationHandler CreateLocalizationHandler
	// CreateTranslationHandler sets the operation handler for the create translation operation
	CreateTranslationHandler CreateTranslationHandler
	// CreateTranslationFilesHandler sets the operation handler for the create translation files operation
	CreateTranslationFilesHandler CreateTranslationFilesHandler
	// DeleteCategoryHandler sets the operation handler for the delete category operation
	DeleteCategoryHandler DeleteCategoryHandler
	// DeleteIdentifierHandler sets the operation handler for the delete identifier operation
	DeleteIdentifierHandler DeleteIdentifierHandler
	// DeleteLocalizationHandler sets the operation handler for the delete localization operation
	DeleteLocalizationHandler DeleteLocalizationHandler
	// DeleteTranslationHandler sets the operation handler for the delete translation operation
	DeleteTranslationHandler DeleteTranslationHandler
	// DeleteTranslationFileHandler sets the operation handler for the delete translation file operation
	DeleteTranslationFileHandler DeleteTranslationFileHandler
	// HealthCheckHandler sets the operation handler for the health check operation
	HealthCheckHandler HealthCheckHandler
	// InfoHandler sets the operation handler for the info operation
	InfoHandler InfoHandler
	// ListCategoriesHandler sets the operation handler for the list categories operation
	ListCategoriesHandler ListCategoriesHandler
	// ListIdentifiersHandler sets the operation handler for the list identifiers operation
	ListIdentifiersHandler ListIdentifiersHandler
	// ListLocalizationHandler sets the operation handler for the list localization operation
	ListLocalizationHandler ListLocalizationHandler
	// ListTranslationFilesHandler sets the operation handler for the list translation files operation
	ListTranslationFilesHandler ListTranslationFilesHandler
	// ListTranslationsHandler sets the operation handler for the list translations operation
	ListTranslationsHandler ListTranslationsHandler
	// ListUserHandler sets the operation handler for the list user operation
	ListUserHandler ListUserHandler
	// LoginHandler sets the operation handler for the login operation
	LoginHandler LoginHandler
	// LogoutUserHandler sets the operation handler for the logout user operation
	LogoutUserHandler LogoutUserHandler
	// RegUserHandler sets the operation handler for the reg user operation
	RegUserHandler RegUserHandler
	// StatisticHandler sets the operation handler for the statistic operation
	StatisticHandler StatisticHandler
	// StatusTranslationHandler sets the operation handler for the status translation operation
	StatusTranslationHandler StatusTranslationHandler
	// UpdateCategoryHandler sets the operation handler for the update category operation
	UpdateCategoryHandler UpdateCategoryHandler
	// UpdateIdentifierHandler sets the operation handler for the update identifier operation
	UpdateIdentifierHandler UpdateIdentifierHandler
	// UpdateTranslationHandler sets the operation handler for the update translation operation
	UpdateTranslationHandler UpdateTranslationHandler
	// UserChangePasswordHandler sets the operation handler for the user change password operation
	UserChangePasswordHandler UserChangePasswordHandler
	// UserChangeProfileHandler sets the operation handler for the user change profile operation
	UserChangeProfileHandler UserChangeProfileHandler
	// UserChangeStatusHandler sets the operation handler for the user change status operation
	UserChangeStatusHandler UserChangeStatusHandler
	// UserMeHandler sets the operation handler for the user me operation
	UserMeHandler UserMeHandler
	// VersionHandler sets the operation handler for the version operation
	VersionHandler VersionHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *FreonFrontendAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *FreonFrontendAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *FreonFrontendAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *FreonFrontendAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *FreonFrontendAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *FreonFrontendAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *FreonFrontendAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *FreonFrontendAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *FreonFrontendAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the FreonFrontendAPI
func (o *FreonFrontendAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.JWTBearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.CreateCategoryHandler == nil {
		unregistered = append(unregistered, "CreateCategoryHandler")
	}
	if o.CreateIdentifierHandler == nil {
		unregistered = append(unregistered, "CreateIdentifierHandler")
	}
	if o.CreateLocalizationHandler == nil {
		unregistered = append(unregistered, "CreateLocalizationHandler")
	}
	if o.CreateTranslationHandler == nil {
		unregistered = append(unregistered, "CreateTranslationHandler")
	}
	if o.CreateTranslationFilesHandler == nil {
		unregistered = append(unregistered, "CreateTranslationFilesHandler")
	}
	if o.DeleteCategoryHandler == nil {
		unregistered = append(unregistered, "DeleteCategoryHandler")
	}
	if o.DeleteIdentifierHandler == nil {
		unregistered = append(unregistered, "DeleteIdentifierHandler")
	}
	if o.DeleteLocalizationHandler == nil {
		unregistered = append(unregistered, "DeleteLocalizationHandler")
	}
	if o.DeleteTranslationHandler == nil {
		unregistered = append(unregistered, "DeleteTranslationHandler")
	}
	if o.DeleteTranslationFileHandler == nil {
		unregistered = append(unregistered, "DeleteTranslationFileHandler")
	}
	if o.HealthCheckHandler == nil {
		unregistered = append(unregistered, "HealthCheckHandler")
	}
	if o.InfoHandler == nil {
		unregistered = append(unregistered, "InfoHandler")
	}
	if o.ListCategoriesHandler == nil {
		unregistered = append(unregistered, "ListCategoriesHandler")
	}
	if o.ListIdentifiersHandler == nil {
		unregistered = append(unregistered, "ListIdentifiersHandler")
	}
	if o.ListLocalizationHandler == nil {
		unregistered = append(unregistered, "ListLocalizationHandler")
	}
	if o.ListTranslationFilesHandler == nil {
		unregistered = append(unregistered, "ListTranslationFilesHandler")
	}
	if o.ListTranslationsHandler == nil {
		unregistered = append(unregistered, "ListTranslationsHandler")
	}
	if o.ListUserHandler == nil {
		unregistered = append(unregistered, "ListUserHandler")
	}
	if o.LoginHandler == nil {
		unregistered = append(unregistered, "LoginHandler")
	}
	if o.LogoutUserHandler == nil {
		unregistered = append(unregistered, "LogoutUserHandler")
	}
	if o.RegUserHandler == nil {
		unregistered = append(unregistered, "RegUserHandler")
	}
	if o.StatisticHandler == nil {
		unregistered = append(unregistered, "StatisticHandler")
	}
	if o.StatusTranslationHandler == nil {
		unregistered = append(unregistered, "StatusTranslationHandler")
	}
	if o.UpdateCategoryHandler == nil {
		unregistered = append(unregistered, "UpdateCategoryHandler")
	}
	if o.UpdateIdentifierHandler == nil {
		unregistered = append(unregistered, "UpdateIdentifierHandler")
	}
	if o.UpdateTranslationHandler == nil {
		unregistered = append(unregistered, "UpdateTranslationHandler")
	}
	if o.UserChangePasswordHandler == nil {
		unregistered = append(unregistered, "UserChangePasswordHandler")
	}
	if o.UserChangeProfileHandler == nil {
		unregistered = append(unregistered, "UserChangeProfileHandler")
	}
	if o.UserChangeStatusHandler == nil {
		unregistered = append(unregistered, "UserChangeStatusHandler")
	}
	if o.UserMeHandler == nil {
		unregistered = append(unregistered, "UserMeHandler")
	}
	if o.VersionHandler == nil {
		unregistered = append(unregistered, "VersionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *FreonFrontendAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *FreonFrontendAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "JWTBearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.JWTBearerAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *FreonFrontendAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *FreonFrontendAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *FreonFrontendAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *FreonFrontendAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the freon frontend API
func (o *FreonFrontendAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *FreonFrontendAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category"] = NewCreateCategory(o.context, o.CreateCategoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/identifier"] = NewCreateIdentifier(o.context, o.CreateIdentifierHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/localization"] = NewCreateLocalization(o.context, o.CreateLocalizationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/translation"] = NewCreateTranslation(o.context, o.CreateTranslationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/translation/files"] = NewCreateTranslationFiles(o.context, o.CreateTranslationFilesHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/category/{id}"] = NewDeleteCategory(o.context, o.DeleteCategoryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/identifier/{id}"] = NewDeleteIdentifier(o.context, o.DeleteIdentifierHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/localization/{id}"] = NewDeleteLocalization(o.context, o.DeleteLocalizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/translation/{id}"] = NewDeleteTranslation(o.context, o.DeleteTranslationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/translation/file/{id}"] = NewDeleteTranslationFile(o.context, o.DeleteTranslationFileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health-check"] = NewHealthCheck(o.context, o.HealthCheckHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info"] = NewInfo(o.context, o.InfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/categories"] = NewListCategories(o.context, o.ListCategoriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/identifiers"] = NewListIdentifiers(o.context, o.ListIdentifiersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/localizations"] = NewListLocalization(o.context, o.ListLocalizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/translation/files"] = NewListTranslationFiles(o.context, o.ListTranslationFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/translations"] = NewListTranslations(o.context, o.ListTranslationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = NewListUser(o.context, o.ListUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login"] = NewLogin(o.context, o.LoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/logout"] = NewLogoutUser(o.context, o.LogoutUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/register"] = NewRegUser(o.context, o.RegUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/statistic"] = NewStatistic(o.context, o.StatisticHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/translation/{id}/status/{status}"] = NewStatusTranslation(o.context, o.StatusTranslationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/category/{id}"] = NewUpdateCategory(o.context, o.UpdateCategoryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/identifier/{id}"] = NewUpdateIdentifier(o.context, o.UpdateIdentifierHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/translation/{id}"] = NewUpdateTranslation(o.context, o.UpdateTranslationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/change-password"] = NewUserChangePassword(o.context, o.UserChangePasswordHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/change-profile"] = NewUserChangeProfile(o.context, o.UserChangeProfileHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/change-status"] = NewUserChangeStatus(o.context, o.UserChangeStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/me"] = NewUserMe(o.context, o.UserMeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = NewVersion(o.context, o.VersionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *FreonFrontendAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *FreonFrontendAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *FreonFrontendAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *FreonFrontendAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *FreonFrontendAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
