// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// InfoOKCode is the HTTP code returned for type InfoOK
const InfoOKCode int = 200

/*InfoOK response

swagger:response infoOK
*/
type InfoOK struct {

	/*
	  In: Body
	*/
	Payload *model.Info `json:"body,omitempty"`
}

// NewInfoOK creates InfoOK with default headers values
func NewInfoOK() *InfoOK {

	return &InfoOK{}
}

// WithPayload adds the payload to the info o k response
func (o *InfoOK) WithPayload(payload *model.Info) *InfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the info o k response
func (o *InfoOK) SetPayload(payload *model.Info) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *InfoOK) InfoResponder() {}

/*InfoDefault General errors using same model as used by go-swagger for validation errors.

swagger:response infoDefault
*/
type InfoDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewInfoDefault creates InfoDefault with default headers values
func NewInfoDefault(code int) *InfoDefault {
	if code <= 0 {
		code = 500
	}

	return &InfoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the info default response
func (o *InfoDefault) WithStatusCode(code int) *InfoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the info default response
func (o *InfoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the info default response
func (o *InfoDefault) WithPayload(payload *model.Error) *InfoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the info default response
func (o *InfoDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InfoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *InfoDefault) InfoResponder() {}

type InfoNotImplementedResponder struct {
	middleware.Responder
}

func (*InfoNotImplementedResponder) InfoResponder() {}

func InfoNotImplemented() InfoResponder {
	return &InfoNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Info has not yet been implemented",
		),
	}
}

type InfoResponder interface {
	middleware.Responder
	InfoResponder()
}
