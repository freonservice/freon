// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListIdentifiersParams creates a new ListIdentifiersParams object
//
// There are no default values defined in the spec.
func NewListIdentifiersParams() ListIdentifiersParams {

	return ListIdentifiersParams{}
}

// ListIdentifiersParams contains all the bound params for the list identifiers operation
// typically these are obtained from a http.Request
//
// swagger:parameters listIdentifiers
type ListIdentifiersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Minimum: 1
	  In: query
	*/
	CategoryID *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListIdentifiersParams() beforehand.
func (o *ListIdentifiersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCategoryID, qhkCategoryID, _ := qs.GetOK("category_id")
	if err := o.bindCategoryID(qCategoryID, qhkCategoryID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCategoryID binds and validates parameter CategoryID from query.
func (o *ListIdentifiersParams) bindCategoryID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("category_id", "query", "int64", raw)
	}
	o.CategoryID = &value

	if err := o.validateCategoryID(formats); err != nil {
		return err
	}

	return nil
}

// validateCategoryID carries on validations for parameter CategoryID
func (o *ListIdentifiersParams) validateCategoryID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("category_id", "query", *o.CategoryID, 1, false); err != nil {
		return err
	}

	return nil
}
