// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// ListLocalizationOKCode is the HTTP code returned for type ListLocalizationOK
const ListLocalizationOKCode int = 200

/*ListLocalizationOK List of localizations available for current user

swagger:response listLocalizationOK
*/
type ListLocalizationOK struct {

	/*
	  In: Body
	*/
	Payload []*model.Localization `json:"body,omitempty"`
}

// NewListLocalizationOK creates ListLocalizationOK with default headers values
func NewListLocalizationOK() *ListLocalizationOK {

	return &ListLocalizationOK{}
}

// WithPayload adds the payload to the list localization o k response
func (o *ListLocalizationOK) WithPayload(payload []*model.Localization) *ListLocalizationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list localization o k response
func (o *ListLocalizationOK) SetPayload(payload []*model.Localization) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListLocalizationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*model.Localization, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *ListLocalizationOK) ListLocalizationResponder() {}

/*ListLocalizationDefault General errors using same model as used by go-swagger for validation errors.

swagger:response listLocalizationDefault
*/
type ListLocalizationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewListLocalizationDefault creates ListLocalizationDefault with default headers values
func NewListLocalizationDefault(code int) *ListLocalizationDefault {
	if code <= 0 {
		code = 500
	}

	return &ListLocalizationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the list localization default response
func (o *ListLocalizationDefault) WithStatusCode(code int) *ListLocalizationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the list localization default response
func (o *ListLocalizationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the list localization default response
func (o *ListLocalizationDefault) WithPayload(payload *model.Error) *ListLocalizationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list localization default response
func (o *ListLocalizationDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListLocalizationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *ListLocalizationDefault) ListLocalizationResponder() {}

type ListLocalizationNotImplementedResponder struct {
	middleware.Responder
}

func (*ListLocalizationNotImplementedResponder) ListLocalizationResponder() {}

func ListLocalizationNotImplemented() ListLocalizationResponder {
	return &ListLocalizationNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.ListLocalization has not yet been implemented",
		),
	}
}

type ListLocalizationResponder interface {
	middleware.Responder
	ListLocalizationResponder()
}
