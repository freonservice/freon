// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListTranslationFilesParams creates a new ListTranslationFilesParams object
//
// There are no default values defined in the spec.
func NewListTranslationFilesParams() ListTranslationFilesParams {

	return ListTranslationFilesParams{}
}

// ListTranslationFilesParams contains all the bound params for the list translation files operation
// typically these are obtained from a http.Request
//
// swagger:parameters listTranslationFiles
type ListTranslationFilesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Minimum: 1
	  In: query
	*/
	LocalizationID *int64
	/*
	  In: query
	*/
	Platform *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListTranslationFilesParams() beforehand.
func (o *ListTranslationFilesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLocalizationID, qhkLocalizationID, _ := qs.GetOK("localization_id")
	if err := o.bindLocalizationID(qLocalizationID, qhkLocalizationID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPlatform, qhkPlatform, _ := qs.GetOK("platform")
	if err := o.bindPlatform(qPlatform, qhkPlatform, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLocalizationID binds and validates parameter LocalizationID from query.
func (o *ListTranslationFilesParams) bindLocalizationID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("localization_id", "query", "int64", raw)
	}
	o.LocalizationID = &value

	if err := o.validateLocalizationID(formats); err != nil {
		return err
	}

	return nil
}

// validateLocalizationID carries on validations for parameter LocalizationID
func (o *ListTranslationFilesParams) validateLocalizationID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("localization_id", "query", *o.LocalizationID, 1, false); err != nil {
		return err
	}

	return nil
}

// bindPlatform binds and validates parameter Platform from query.
func (o *ListTranslationFilesParams) bindPlatform(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Platform = &raw

	return nil
}
