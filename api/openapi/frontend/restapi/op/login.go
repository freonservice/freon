// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoginHandlerFunc turns a function with the right signature into a login handler
type LoginHandlerFunc func(LoginParams) LoginResponder

// Handle executing the request and returning a response
func (fn LoginHandlerFunc) Handle(params LoginParams) LoginResponder {
	return fn(params)
}

// LoginHandler interface for that can handle valid login params
type LoginHandler interface {
	Handle(LoginParams) LoginResponder
}

// NewLogin creates a new http.Handler for the login operation
func NewLogin(ctx *middleware.Context, handler LoginHandler) *Login {
	return &Login{Context: ctx, Handler: handler}
}

/* Login swagger:route POST /login login

login user by email and password

*/
type Login struct {
	Context *middleware.Context
	Handler LoginHandler
}

func (o *Login) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// LoginBody login body
//
// swagger:model LoginBody
type LoginBody struct {

	// email
	// Required: true
	// Max Length: 255
	// Min Length: 1
	// Pattern: ^[\x21-\x7F]{1,64}@[\x21-\x3F\x41-\x7F]+$
	Email *string `json:"email"`

	// password
	// Required: true
	// Max Length: 100
	// Min Length: 6
	// Format: password
	Password *strfmt.Password `json:"password"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *LoginBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// email
		// Required: true
		// Max Length: 255
		// Min Length: 1
		// Pattern: ^[\x21-\x7F]{1,64}@[\x21-\x3F\x41-\x7F]+$
		Email *string `json:"email"`

		// password
		// Required: true
		// Max Length: 100
		// Min Length: 6
		// Format: password
		Password *strfmt.Password `json:"password"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Email = props.Email
	o.Password = props.Password
	return nil
}

// Validate validates this login body
func (o *LoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"email", "body", *o.Email, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("args"+"."+"email", "body", *o.Email, 255); err != nil {
		return err
	}

	if err := validate.Pattern("args"+"."+"email", "body", *o.Email, `^[\x21-\x7F]{1,64}@[\x21-\x3F\x41-\x7F]+$`); err != nil {
		return err
	}

	return nil
}

func (o *LoginBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"password", "body", o.Password.String(), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("args"+"."+"password", "body", o.Password.String(), 100); err != nil {
		return err
	}

	if err := validate.FormatOf("args"+"."+"password", "body", "password", o.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this login body based on context it is used
func (o *LoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginBody) UnmarshalBinary(b []byte) error {
	var res LoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// LoginOKBody login o k body
//
// swagger:model LoginOKBody
type LoginOKBody struct {

	// token
	// Required: true
	Token *string `json:"token"`

	// user
	// Required: true
	User *LoginOKBodyUser `json:"user"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *LoginOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// token
		// Required: true
		Token *string `json:"token"`

		// user
		// Required: true
		User *LoginOKBodyUser `json:"user"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Token = props.Token
	o.User = props.User
	return nil
}

// Validate validates this login o k body
func (o *LoginOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginOKBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

func (o *LoginOKBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this login o k body based on the context it is used
func (o *LoginOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginOKBody) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if o.User != nil {
		if err := o.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginOKBody) UnmarshalBinary(b []byte) error {
	var res LoginOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// LoginOKBodyUser login o k body user
//
// swagger:model LoginOKBodyUser
type LoginOKBodyUser struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// first name
	// Required: true
	FirstName *string `json:"first_name"`

	// role
	// Required: true
	Role *int64 `json:"role"`

	// second name
	// Required: true
	SecondName *string `json:"second_name"`

	// uuid id
	// Required: true
	UUIDID *string `json:"uuid_id"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *LoginOKBodyUser) UnmarshalJSON(data []byte) error {
	var props struct {

		// email
		// Required: true
		Email *string `json:"email"`

		// first name
		// Required: true
		FirstName *string `json:"first_name"`

		// role
		// Required: true
		Role *int64 `json:"role"`

		// second name
		// Required: true
		SecondName *string `json:"second_name"`

		// uuid id
		// Required: true
		UUIDID *string `json:"uuid_id"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Email = props.Email
	o.FirstName = props.FirstName
	o.Role = props.Role
	o.SecondName = props.SecondName
	o.UUIDID = props.UUIDID
	return nil
}

// Validate validates this login o k body user
func (o *LoginOKBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecondName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUUIDID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginOKBodyUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"user"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *LoginOKBodyUser) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"user"+"."+"first_name", "body", o.FirstName); err != nil {
		return err
	}

	return nil
}

func (o *LoginOKBodyUser) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"user"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

func (o *LoginOKBodyUser) validateSecondName(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"user"+"."+"second_name", "body", o.SecondName); err != nil {
		return err
	}

	return nil
}

func (o *LoginOKBodyUser) validateUUIDID(formats strfmt.Registry) error {

	if err := validate.Required("loginOK"+"."+"user"+"."+"uuid_id", "body", o.UUIDID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this login o k body user based on context it is used
func (o *LoginOKBodyUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LoginOKBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginOKBodyUser) UnmarshalBinary(b []byte) error {
	var res LoginOKBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
