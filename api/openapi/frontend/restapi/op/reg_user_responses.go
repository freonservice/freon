// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// RegUserNoContentCode is the HTTP code returned for type RegUserNoContent
const RegUserNoContentCode int = 204

/*RegUserNoContent No content in answer

swagger:response regUserNoContent
*/
type RegUserNoContent struct {
}

// NewRegUserNoContent creates RegUserNoContent with default headers values
func NewRegUserNoContent() *RegUserNoContent {

	return &RegUserNoContent{}
}

// WriteResponse to the client
func (o *RegUserNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *RegUserNoContent) RegUserResponder() {}

/*RegUserDefault General errors using same model as used by go-swagger for validation errors.

swagger:response regUserDefault
*/
type RegUserDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewRegUserDefault creates RegUserDefault with default headers values
func NewRegUserDefault(code int) *RegUserDefault {
	if code <= 0 {
		code = 500
	}

	return &RegUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the reg user default response
func (o *RegUserDefault) WithStatusCode(code int) *RegUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the reg user default response
func (o *RegUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the reg user default response
func (o *RegUserDefault) WithPayload(payload *model.Error) *RegUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reg user default response
func (o *RegUserDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *RegUserDefault) RegUserResponder() {}

type RegUserNotImplementedResponder struct {
	middleware.Responder
}

func (*RegUserNotImplementedResponder) RegUserResponder() {}

func RegUserNotImplemented() RegUserResponder {
	return &RegUserNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.RegUser has not yet been implemented",
		),
	}
}

type RegUserResponder interface {
	middleware.Responder
	RegUserResponder()
}
