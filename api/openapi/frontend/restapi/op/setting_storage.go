// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freonservice/freon/internal/app"
)

// SettingStorageHandlerFunc turns a function with the right signature into a setting storage handler
type SettingStorageHandlerFunc func(SettingStorageParams, *app.UserSession) SettingStorageResponder

// Handle executing the request and returning a response
func (fn SettingStorageHandlerFunc) Handle(params SettingStorageParams, principal *app.UserSession) SettingStorageResponder {
	return fn(params, principal)
}

// SettingStorageHandler interface for that can handle valid setting storage params
type SettingStorageHandler interface {
	Handle(SettingStorageParams, *app.UserSession) SettingStorageResponder
}

// NewSettingStorage creates a new http.Handler for the setting storage operation
func NewSettingStorage(ctx *middleware.Context, handler SettingStorageHandler) *SettingStorage {
	return &SettingStorage{Context: ctx, Handler: handler}
}

/* SettingStorage swagger:route PUT /setting/storage settingStorage

settingStorage

*/
type SettingStorage struct {
	Context *middleware.Context
	Handler SettingStorageHandler
}

func (o *SettingStorage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSettingStorageParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SettingStorageBody setting storage body
//
// swagger:model SettingStorageBody
type SettingStorageBody struct {

	// use
	Use int32 `json:"use,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *SettingStorageBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// use
		Use int32 `json:"use,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Use = props.Use
	return nil
}

// Validate validates this setting storage body
func (o *SettingStorageBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this setting storage body based on context it is used
func (o *SettingStorageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SettingStorageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SettingStorageBody) UnmarshalBinary(b []byte) error {
	var res SettingStorageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
