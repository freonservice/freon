// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/freonservice/freon/internal/app"
)

// SettingTranslationHandlerFunc turns a function with the right signature into a setting translation handler
type SettingTranslationHandlerFunc func(SettingTranslationParams, *app.UserSession) SettingTranslationResponder

// Handle executing the request and returning a response
func (fn SettingTranslationHandlerFunc) Handle(params SettingTranslationParams, principal *app.UserSession) SettingTranslationResponder {
	return fn(params, principal)
}

// SettingTranslationHandler interface for that can handle valid setting translation params
type SettingTranslationHandler interface {
	Handle(SettingTranslationParams, *app.UserSession) SettingTranslationResponder
}

// NewSettingTranslation creates a new http.Handler for the setting translation operation
func NewSettingTranslation(ctx *middleware.Context, handler SettingTranslationHandler) *SettingTranslation {
	return &SettingTranslation{Context: ctx, Handler: handler}
}

/* SettingTranslation swagger:route PUT /setting/translation settingTranslation

settingTranslation

*/
type SettingTranslation struct {
	Context *middleware.Context
	Handler SettingTranslationHandler
}

func (o *SettingTranslation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSettingTranslationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SettingTranslationBody setting translation body
//
// swagger:model SettingTranslationBody
type SettingTranslationBody struct {

	// auto
	Auto bool `json:"auto,omitempty"`

	// main language
	// Min Length: 2
	MainLanguage string `json:"main_language,omitempty"`

	// use
	Use int32 `json:"use,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *SettingTranslationBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// auto
		Auto bool `json:"auto,omitempty"`

		// main language
		// Min Length: 2
		MainLanguage string `json:"main_language,omitempty"`

		// use
		Use int32 `json:"use,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Auto = props.Auto
	o.MainLanguage = props.MainLanguage
	o.Use = props.Use
	return nil
}

// Validate validates this setting translation body
func (o *SettingTranslationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMainLanguage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SettingTranslationBody) validateMainLanguage(formats strfmt.Registry) error {
	if swag.IsZero(o.MainLanguage) { // not required
		return nil
	}

	if err := validate.MinLength("args"+"."+"main_language", "body", o.MainLanguage, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this setting translation body based on context it is used
func (o *SettingTranslationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SettingTranslationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SettingTranslationBody) UnmarshalBinary(b []byte) error {
	var res SettingTranslationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
