// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/freonservice/freon/api/openapi/frontend/model"
	"github.com/freonservice/freon/internal/app"
)

// SettingsHandlerFunc turns a function with the right signature into a settings handler
type SettingsHandlerFunc func(SettingsParams, *app.UserSession) SettingsResponder

// Handle executing the request and returning a response
func (fn SettingsHandlerFunc) Handle(params SettingsParams, principal *app.UserSession) SettingsResponder {
	return fn(params, principal)
}

// SettingsHandler interface for that can handle valid settings params
type SettingsHandler interface {
	Handle(SettingsParams, *app.UserSession) SettingsResponder
}

// NewSettings creates a new http.Handler for the settings operation
func NewSettings(ctx *middleware.Context, handler SettingsHandler) *Settings {
	return &Settings{Context: ctx, Handler: handler}
}

/* Settings swagger:route GET /settings settings

settings

*/
type Settings struct {
	Context *middleware.Context
	Handler SettingsHandler
}

func (o *Settings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSettingsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SettingsOKBody settings o k body
//
// swagger:model SettingsOKBody
type SettingsOKBody struct {

	// storage
	Storage *model.StorageConfiguration `json:"storage,omitempty"`

	// translation
	// Required: true
	Translation *model.TranslationConfiguration `json:"translation"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *SettingsOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// storage
		Storage *model.StorageConfiguration `json:"storage,omitempty"`

		// translation
		// Required: true
		Translation *model.TranslationConfiguration `json:"translation"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Storage = props.Storage
	o.Translation = props.Translation
	return nil
}

// Validate validates this settings o k body
func (o *SettingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTranslation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SettingsOKBody) validateStorage(formats strfmt.Registry) error {
	if swag.IsZero(o.Storage) { // not required
		return nil
	}

	if o.Storage != nil {
		if err := o.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingsOK" + "." + "storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settingsOK" + "." + "storage")
			}
			return err
		}
	}

	return nil
}

func (o *SettingsOKBody) validateTranslation(formats strfmt.Registry) error {

	if err := validate.Required("settingsOK"+"."+"translation", "body", o.Translation); err != nil {
		return err
	}

	if o.Translation != nil {
		if err := o.Translation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingsOK" + "." + "translation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settingsOK" + "." + "translation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this settings o k body based on the context it is used
func (o *SettingsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTranslation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SettingsOKBody) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if o.Storage != nil {
		if err := o.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingsOK" + "." + "storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settingsOK" + "." + "storage")
			}
			return err
		}
	}

	return nil
}

func (o *SettingsOKBody) contextValidateTranslation(ctx context.Context, formats strfmt.Registry) error {

	if o.Translation != nil {
		if err := o.Translation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingsOK" + "." + "translation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settingsOK" + "." + "translation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SettingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SettingsOKBody) UnmarshalBinary(b []byte) error {
	var res SettingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
