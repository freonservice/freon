// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// SettingsOKCode is the HTTP code returned for type SettingsOK
const SettingsOKCode int = 200

/*SettingsOK get current settings full system (translation, storage, etc)

swagger:response settingsOK
*/
type SettingsOK struct {

	/*
	  In: Body
	*/
	Payload *SettingsOKBody `json:"body,omitempty"`
}

// NewSettingsOK creates SettingsOK with default headers values
func NewSettingsOK() *SettingsOK {

	return &SettingsOK{}
}

// WithPayload adds the payload to the settings o k response
func (o *SettingsOK) WithPayload(payload *SettingsOKBody) *SettingsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the settings o k response
func (o *SettingsOK) SetPayload(payload *SettingsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SettingsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *SettingsOK) SettingsResponder() {}

/*SettingsDefault General errors using same model as used by go-swagger for validation errors.

swagger:response settingsDefault
*/
type SettingsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewSettingsDefault creates SettingsDefault with default headers values
func NewSettingsDefault(code int) *SettingsDefault {
	if code <= 0 {
		code = 500
	}

	return &SettingsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the settings default response
func (o *SettingsDefault) WithStatusCode(code int) *SettingsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the settings default response
func (o *SettingsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the settings default response
func (o *SettingsDefault) WithPayload(payload *model.Error) *SettingsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the settings default response
func (o *SettingsDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SettingsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *SettingsDefault) SettingsResponder() {}

type SettingsNotImplementedResponder struct {
	middleware.Responder
}

func (*SettingsNotImplementedResponder) SettingsResponder() {}

func SettingsNotImplemented() SettingsResponder {
	return &SettingsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Settings has not yet been implemented",
		),
	}
}

type SettingsResponder interface {
	middleware.Responder
	SettingsResponder()
}
