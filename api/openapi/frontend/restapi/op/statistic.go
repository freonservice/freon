// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/freonservice/freon/internal/app"
)

// StatisticHandlerFunc turns a function with the right signature into a statistic handler
type StatisticHandlerFunc func(StatisticParams, *app.UserSession) StatisticResponder

// Handle executing the request and returning a response
func (fn StatisticHandlerFunc) Handle(params StatisticParams, principal *app.UserSession) StatisticResponder {
	return fn(params, principal)
}

// StatisticHandler interface for that can handle valid statistic params
type StatisticHandler interface {
	Handle(StatisticParams, *app.UserSession) StatisticResponder
}

// NewStatistic creates a new http.Handler for the statistic operation
func NewStatistic(ctx *middleware.Context, handler StatisticHandler) *Statistic {
	return &Statistic{Context: ctx, Handler: handler}
}

/*Statistic swagger:route GET /statistic statistic

get service statistic

*/
type Statistic struct {
	Context *middleware.Context
	Handler StatisticHandler
}

func (o *Statistic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStatisticParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StatisticOKBody statistic o k body
//
// swagger:model StatisticOKBody
type StatisticOKBody struct {

	// count categories
	// Required: true
	// Minimum: 0
	CountCategories *int64 `json:"count_categories"`

	// count identifiers
	// Required: true
	// Minimum: 0
	CountIdentifiers *int64 `json:"count_identifiers"`

	// count localizations
	// Required: true
	// Minimum: 0
	CountLocalizations *int64 `json:"count_localizations"`

	// count users
	// Required: true
	// Minimum: 0
	CountUsers *int64 `json:"count_users"`

	// stat completed translations
	// Required: true
	StatCompletedTranslations []*StatisticOKBodyStatCompletedTranslationsItems0 `json:"stat_completed_translations"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *StatisticOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// count categories
		// Required: true
		// Minimum: 0
		CountCategories *int64 `json:"count_categories"`

		// count identifiers
		// Required: true
		// Minimum: 0
		CountIdentifiers *int64 `json:"count_identifiers"`

		// count localizations
		// Required: true
		// Minimum: 0
		CountLocalizations *int64 `json:"count_localizations"`

		// count users
		// Required: true
		// Minimum: 0
		CountUsers *int64 `json:"count_users"`

		// stat completed translations
		// Required: true
		StatCompletedTranslations []*StatisticOKBodyStatCompletedTranslationsItems0 `json:"stat_completed_translations"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.CountCategories = props.CountCategories
	o.CountIdentifiers = props.CountIdentifiers
	o.CountLocalizations = props.CountLocalizations
	o.CountUsers = props.CountUsers
	o.StatCompletedTranslations = props.StatCompletedTranslations
	return nil
}

// Validate validates this statistic o k body
func (o *StatisticOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountLocalizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatCompletedTranslations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatisticOKBody) validateCountCategories(formats strfmt.Registry) error {

	if err := validate.Required("statisticOK"+"."+"count_categories", "body", o.CountCategories); err != nil {
		return err
	}

	if err := validate.MinimumInt("statisticOK"+"."+"count_categories", "body", int64(*o.CountCategories), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *StatisticOKBody) validateCountIdentifiers(formats strfmt.Registry) error {

	if err := validate.Required("statisticOK"+"."+"count_identifiers", "body", o.CountIdentifiers); err != nil {
		return err
	}

	if err := validate.MinimumInt("statisticOK"+"."+"count_identifiers", "body", int64(*o.CountIdentifiers), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *StatisticOKBody) validateCountLocalizations(formats strfmt.Registry) error {

	if err := validate.Required("statisticOK"+"."+"count_localizations", "body", o.CountLocalizations); err != nil {
		return err
	}

	if err := validate.MinimumInt("statisticOK"+"."+"count_localizations", "body", int64(*o.CountLocalizations), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *StatisticOKBody) validateCountUsers(formats strfmt.Registry) error {

	if err := validate.Required("statisticOK"+"."+"count_users", "body", o.CountUsers); err != nil {
		return err
	}

	if err := validate.MinimumInt("statisticOK"+"."+"count_users", "body", int64(*o.CountUsers), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *StatisticOKBody) validateStatCompletedTranslations(formats strfmt.Registry) error {

	if err := validate.Required("statisticOK"+"."+"stat_completed_translations", "body", o.StatCompletedTranslations); err != nil {
		return err
	}

	for i := 0; i < len(o.StatCompletedTranslations); i++ {
		if swag.IsZero(o.StatCompletedTranslations[i]) { // not required
			continue
		}

		if o.StatCompletedTranslations[i] != nil {
			if err := o.StatCompletedTranslations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statisticOK" + "." + "stat_completed_translations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StatisticOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatisticOKBody) UnmarshalBinary(b []byte) error {
	var res StatisticOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StatisticOKBodyStatCompletedTranslationsItems0 statistic o k body stat completed translations items0
//
// swagger:model StatisticOKBodyStatCompletedTranslationsItems0
type StatisticOKBodyStatCompletedTranslationsItems0 struct {

	// lang name
	// Required: true
	LangName *string `json:"lang_name"`

	// percentage
	// Required: true
	Percentage *float64 `json:"percentage"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *StatisticOKBodyStatCompletedTranslationsItems0) UnmarshalJSON(data []byte) error {
	var props struct {

		// lang name
		// Required: true
		LangName *string `json:"lang_name"`

		// percentage
		// Required: true
		Percentage *float64 `json:"percentage"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.LangName = props.LangName
	o.Percentage = props.Percentage
	return nil
}

// Validate validates this statistic o k body stat completed translations items0
func (o *StatisticOKBodyStatCompletedTranslationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLangName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatisticOKBodyStatCompletedTranslationsItems0) validateLangName(formats strfmt.Registry) error {

	if err := validate.Required("lang_name", "body", o.LangName); err != nil {
		return err
	}

	return nil
}

func (o *StatisticOKBodyStatCompletedTranslationsItems0) validatePercentage(formats strfmt.Registry) error {

	if err := validate.Required("percentage", "body", o.Percentage); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StatisticOKBodyStatCompletedTranslationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatisticOKBodyStatCompletedTranslationsItems0) UnmarshalBinary(b []byte) error {
	var res StatisticOKBodyStatCompletedTranslationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
