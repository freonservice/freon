// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/internal/app"
)

// StatusTranslationHandlerFunc turns a function with the right signature into a status translation handler
type StatusTranslationHandlerFunc func(StatusTranslationParams, *app.UserSession) StatusTranslationResponder

// Handle executing the request and returning a response
func (fn StatusTranslationHandlerFunc) Handle(params StatusTranslationParams, principal *app.UserSession) StatusTranslationResponder {
	return fn(params, principal)
}

// StatusTranslationHandler interface for that can handle valid status translation params
type StatusTranslationHandler interface {
	Handle(StatusTranslationParams, *app.UserSession) StatusTranslationResponder
}

// NewStatusTranslation creates a new http.Handler for the status translation operation
func NewStatusTranslation(ctx *middleware.Context, handler StatusTranslationHandler) *StatusTranslation {
	return &StatusTranslation{Context: ctx, Handler: handler}
}

/* StatusTranslation swagger:route PUT /translation/{id}/status/{status} statusTranslation

change current status translation (hidden, draft, release)

*/
type StatusTranslation struct {
	Context *middleware.Context
	Handler StatusTranslationHandler
}

func (o *StatusTranslation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStatusTranslationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
