// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// SupportedLanguagesOKCode is the HTTP code returned for type SupportedLanguagesOK
const SupportedLanguagesOKCode int = 200

/*SupportedLanguagesOK get list of all supported languages

swagger:response supportedLanguagesOK
*/
type SupportedLanguagesOK struct {

	/*
	  In: Body
	*/
	Payload []*model.Language `json:"body,omitempty"`
}

// NewSupportedLanguagesOK creates SupportedLanguagesOK with default headers values
func NewSupportedLanguagesOK() *SupportedLanguagesOK {

	return &SupportedLanguagesOK{}
}

// WithPayload adds the payload to the supported languages o k response
func (o *SupportedLanguagesOK) WithPayload(payload []*model.Language) *SupportedLanguagesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the supported languages o k response
func (o *SupportedLanguagesOK) SetPayload(payload []*model.Language) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SupportedLanguagesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*model.Language, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *SupportedLanguagesOK) SupportedLanguagesResponder() {}

/*SupportedLanguagesDefault General errors using same model as used by go-swagger for validation errors.

swagger:response supportedLanguagesDefault
*/
type SupportedLanguagesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewSupportedLanguagesDefault creates SupportedLanguagesDefault with default headers values
func NewSupportedLanguagesDefault(code int) *SupportedLanguagesDefault {
	if code <= 0 {
		code = 500
	}

	return &SupportedLanguagesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the supported languages default response
func (o *SupportedLanguagesDefault) WithStatusCode(code int) *SupportedLanguagesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the supported languages default response
func (o *SupportedLanguagesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the supported languages default response
func (o *SupportedLanguagesDefault) WithPayload(payload *model.Error) *SupportedLanguagesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the supported languages default response
func (o *SupportedLanguagesDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SupportedLanguagesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *SupportedLanguagesDefault) SupportedLanguagesResponder() {}

type SupportedLanguagesNotImplementedResponder struct {
	middleware.Responder
}

func (*SupportedLanguagesNotImplementedResponder) SupportedLanguagesResponder() {}

func SupportedLanguagesNotImplemented() SupportedLanguagesResponder {
	return &SupportedLanguagesNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.SupportedLanguages has not yet been implemented",
		),
	}
}

type SupportedLanguagesResponder interface {
	middleware.Responder
	SupportedLanguagesResponder()
}
