// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/internal/app"
)

// TranslationFilesHandlerFunc turns a function with the right signature into a translation files handler
type TranslationFilesHandlerFunc func(TranslationFilesParams, *app.UserSession) TranslationFilesResponder

// Handle executing the request and returning a response
func (fn TranslationFilesHandlerFunc) Handle(params TranslationFilesParams, principal *app.UserSession) TranslationFilesResponder {
	return fn(params, principal)
}

// TranslationFilesHandler interface for that can handle valid translation files params
type TranslationFilesHandler interface {
	Handle(TranslationFilesParams, *app.UserSession) TranslationFilesResponder
}

// NewTranslationFiles creates a new http.Handler for the translation files operation
func NewTranslationFiles(ctx *middleware.Context, handler TranslationFilesHandler) *TranslationFiles {
	return &TranslationFiles{Context: ctx, Handler: handler}
}

/*TranslationFiles swagger:route GET /translation-files translationFiles

get full list of available translation files

*/
type TranslationFiles struct {
	Context *middleware.Context
	Handler TranslationFilesHandler
}

func (o *TranslationFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTranslationFilesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
