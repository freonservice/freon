// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/internal/app"
)

// TranslationVersionsHandlerFunc turns a function with the right signature into a translation versions handler
type TranslationVersionsHandlerFunc func(TranslationVersionsParams, *app.UserSession) TranslationVersionsResponder

// Handle executing the request and returning a response
func (fn TranslationVersionsHandlerFunc) Handle(params TranslationVersionsParams, principal *app.UserSession) TranslationVersionsResponder {
	return fn(params, principal)
}

// TranslationVersionsHandler interface for that can handle valid translation versions params
type TranslationVersionsHandler interface {
	Handle(TranslationVersionsParams, *app.UserSession) TranslationVersionsResponder
}

// NewTranslationVersions creates a new http.Handler for the translation versions operation
func NewTranslationVersions(ctx *middleware.Context, handler TranslationVersionsHandler) *TranslationVersions {
	return &TranslationVersions{Context: ctx, Handler: handler}
}

/*TranslationVersions swagger:route GET /translation/versions translationVersions

translation versions

*/
type TranslationVersions struct {
	Context *middleware.Context
	Handler TranslationVersionsHandler
}

func (o *TranslationVersions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTranslationVersionsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
