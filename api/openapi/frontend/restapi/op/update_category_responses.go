// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// UpdateCategoryNoContentCode is the HTTP code returned for type UpdateCategoryNoContent
const UpdateCategoryNoContentCode int = 204

/*UpdateCategoryNoContent No content in answer

swagger:response updateCategoryNoContent
*/
type UpdateCategoryNoContent struct {
}

// NewUpdateCategoryNoContent creates UpdateCategoryNoContent with default headers values
func NewUpdateCategoryNoContent() *UpdateCategoryNoContent {

	return &UpdateCategoryNoContent{}
}

// WriteResponse to the client
func (o *UpdateCategoryNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *UpdateCategoryNoContent) UpdateCategoryResponder() {}

/*UpdateCategoryDefault General errors using same model as used by go-swagger for validation errors.

swagger:response updateCategoryDefault
*/
type UpdateCategoryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewUpdateCategoryDefault creates UpdateCategoryDefault with default headers values
func NewUpdateCategoryDefault(code int) *UpdateCategoryDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateCategoryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update category default response
func (o *UpdateCategoryDefault) WithStatusCode(code int) *UpdateCategoryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update category default response
func (o *UpdateCategoryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update category default response
func (o *UpdateCategoryDefault) WithPayload(payload *model.Error) *UpdateCategoryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update category default response
func (o *UpdateCategoryDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCategoryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UpdateCategoryDefault) UpdateCategoryResponder() {}

type UpdateCategoryNotImplementedResponder struct {
	middleware.Responder
}

func (*UpdateCategoryNotImplementedResponder) UpdateCategoryResponder() {}

func UpdateCategoryNotImplemented() UpdateCategoryResponder {
	return &UpdateCategoryNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.UpdateCategory has not yet been implemented",
		),
	}
}

type UpdateCategoryResponder interface {
	middleware.Responder
	UpdateCategoryResponder()
}
