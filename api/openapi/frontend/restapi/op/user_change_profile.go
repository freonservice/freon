// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/MarcSky/freon/internal/app"
)

// UserChangeProfileHandlerFunc turns a function with the right signature into a user change profile handler
type UserChangeProfileHandlerFunc func(UserChangeProfileParams, *app.UserSession) UserChangeProfileResponder

// Handle executing the request and returning a response
func (fn UserChangeProfileHandlerFunc) Handle(params UserChangeProfileParams, principal *app.UserSession) UserChangeProfileResponder {
	return fn(params, principal)
}

// UserChangeProfileHandler interface for that can handle valid user change profile params
type UserChangeProfileHandler interface {
	Handle(UserChangeProfileParams, *app.UserSession) UserChangeProfileResponder
}

// NewUserChangeProfile creates a new http.Handler for the user change profile operation
func NewUserChangeProfile(ctx *middleware.Context, handler UserChangeProfileHandler) *UserChangeProfile {
	return &UserChangeProfile{Context: ctx, Handler: handler}
}

/*UserChangeProfile swagger:route PUT /user/change-profile userChangeProfile

user change profile

*/
type UserChangeProfile struct {
	Context *middleware.Context
	Handler UserChangeProfileHandler
}

func (o *UserChangeProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserChangeProfileParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserChangeProfileBody user change profile body
//
// swagger:model UserChangeProfileBody
type UserChangeProfileBody struct {

	// email
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Email *string `json:"email"`

	// first name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	FirstName *string `json:"first_name"`

	// role
	// Enum: [admin moderator translator]
	Role *string `json:"role,omitempty"`

	// second name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	SecondName *string `json:"second_name"`

	// status
	// Enum: [active not active banned]
	Status *string `json:"status,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *UserChangeProfileBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// email
		// Required: true
		// Max Length: 100
		// Min Length: 1
		Email *string `json:"email"`

		// first name
		// Required: true
		// Max Length: 100
		// Min Length: 1
		FirstName *string `json:"first_name"`

		// role
		// Enum: [admin moderator translator]
		Role *string `json:"role,omitempty"`

		// second name
		// Required: true
		// Max Length: 100
		// Min Length: 1
		SecondName *string `json:"second_name"`

		// status
		// Enum: [active not active banned]
		Status *string `json:"status,omitempty"`

		// user id
		UserID int64 `json:"user_id,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Email = props.Email
	o.FirstName = props.FirstName
	o.Role = props.Role
	o.SecondName = props.SecondName
	o.Status = props.Status
	o.UserID = props.UserID
	return nil
}

// Validate validates this user change profile body
func (o *UserChangeProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecondName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserChangeProfileBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"email", "body", string(*o.Email), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("args"+"."+"email", "body", string(*o.Email), 100); err != nil {
		return err
	}

	return nil
}

func (o *UserChangeProfileBody) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"first_name", "body", o.FirstName); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"first_name", "body", string(*o.FirstName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("args"+"."+"first_name", "body", string(*o.FirstName), 100); err != nil {
		return err
	}

	return nil
}

var userChangeProfileBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","moderator","translator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userChangeProfileBodyTypeRolePropEnum = append(userChangeProfileBodyTypeRolePropEnum, v)
	}
}

const (

	// UserChangeProfileBodyRoleAdmin captures enum value "admin"
	UserChangeProfileBodyRoleAdmin string = "admin"

	// UserChangeProfileBodyRoleModerator captures enum value "moderator"
	UserChangeProfileBodyRoleModerator string = "moderator"

	// UserChangeProfileBodyRoleTranslator captures enum value "translator"
	UserChangeProfileBodyRoleTranslator string = "translator"
)

// prop value enum
func (o *UserChangeProfileBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userChangeProfileBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UserChangeProfileBody) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("args"+"."+"role", "body", *o.Role); err != nil {
		return err
	}

	return nil
}

func (o *UserChangeProfileBody) validateSecondName(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"second_name", "body", o.SecondName); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"second_name", "body", string(*o.SecondName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("args"+"."+"second_name", "body", string(*o.SecondName), 100); err != nil {
		return err
	}

	return nil
}

var userChangeProfileBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","not active","banned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userChangeProfileBodyTypeStatusPropEnum = append(userChangeProfileBodyTypeStatusPropEnum, v)
	}
}

const (

	// UserChangeProfileBodyStatusActive captures enum value "active"
	UserChangeProfileBodyStatusActive string = "active"

	// UserChangeProfileBodyStatusNotActive captures enum value "not active"
	UserChangeProfileBodyStatusNotActive string = "not active"

	// UserChangeProfileBodyStatusBanned captures enum value "banned"
	UserChangeProfileBodyStatusBanned string = "banned"
)

// prop value enum
func (o *UserChangeProfileBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userChangeProfileBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UserChangeProfileBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("args"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserChangeProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserChangeProfileBody) UnmarshalBinary(b []byte) error {
	var res UserChangeProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
