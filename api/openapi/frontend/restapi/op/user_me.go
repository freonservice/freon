// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/MarcSky/freon/internal/app"
)

// UserMeHandlerFunc turns a function with the right signature into a user me handler
type UserMeHandlerFunc func(UserMeParams, *app.UserSession) UserMeResponder

// Handle executing the request and returning a response
func (fn UserMeHandlerFunc) Handle(params UserMeParams, principal *app.UserSession) UserMeResponder {
	return fn(params, principal)
}

// UserMeHandler interface for that can handle valid user me params
type UserMeHandler interface {
	Handle(UserMeParams, *app.UserSession) UserMeResponder
}

// NewUserMe creates a new http.Handler for the user me operation
func NewUserMe(ctx *middleware.Context, handler UserMeHandler) *UserMe {
	return &UserMe{Context: ctx, Handler: handler}
}

/*UserMe swagger:route GET /user/me userMe

get own user information

*/
type UserMe struct {
	Context *middleware.Context
	Handler UserMeHandler
}

func (o *UserMe) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserMeParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.UserSession
	if uprinc != nil {
		principal = uprinc.(*app.UserSession) // this is really a app.UserSession, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
