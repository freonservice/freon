// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/freonservice/freon/api/openapi/frontend/model"
)

// UserMeOKCode is the HTTP code returned for type UserMeOK
const UserMeOKCode int = 200

/*UserMeOK user model

swagger:response userMeOK
*/
type UserMeOK struct {

	/*
	  In: Body
	*/
	Payload *model.User `json:"body,omitempty"`
}

// NewUserMeOK creates UserMeOK with default headers values
func NewUserMeOK() *UserMeOK {

	return &UserMeOK{}
}

// WithPayload adds the payload to the user me o k response
func (o *UserMeOK) WithPayload(payload *model.User) *UserMeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user me o k response
func (o *UserMeOK) SetPayload(payload *model.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserMeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UserMeOK) UserMeResponder() {}

/*UserMeDefault General errors using same model as used by go-swagger for validation errors.

swagger:response userMeDefault
*/
type UserMeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewUserMeDefault creates UserMeDefault with default headers values
func NewUserMeDefault(code int) *UserMeDefault {
	if code <= 0 {
		code = 500
	}

	return &UserMeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user me default response
func (o *UserMeDefault) WithStatusCode(code int) *UserMeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user me default response
func (o *UserMeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user me default response
func (o *UserMeDefault) WithPayload(payload *model.Error) *UserMeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user me default response
func (o *UserMeDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserMeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *UserMeDefault) UserMeResponder() {}

type UserMeNotImplementedResponder struct {
	middleware.Responder
}

func (*UserMeNotImplementedResponder) UserMeResponder() {}

func UserMeNotImplemented() UserMeResponder {
	return &UserMeNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.UserMe has not yet been implemented",
		),
	}
}

type UserMeResponder interface {
	middleware.Responder
	UserMeResponder()
}
