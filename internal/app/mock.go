// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/app.go

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	dao "github.com/freonservice/freon/internal/dao"
	domain "github.com/freonservice/freon/internal/domain"
	filter "github.com/freonservice/freon/internal/filter"
	translation "github.com/freonservice/freon/internal/translation"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	sqlx "github.com/jmoiron/sqlx"
	language "golang.org/x/text/language"
)

// MockAppl is a mock of Appl interface.
type MockAppl struct {
	ctrl     *gomock.Controller
	recorder *MockApplMockRecorder
}

// MockApplMockRecorder is the mock recorder for MockAppl.
type MockApplMockRecorder struct {
	mock *MockAppl
}

// NewMockAppl creates a new mock instance.
func NewMockAppl(ctrl *gomock.Controller) *MockAppl {
	mock := &MockAppl{ctrl: ctrl}
	mock.recorder = &MockApplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppl) EXPECT() *MockApplMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method.
func (m *MockAppl) AuthorizeUser(ctx Ctx, email, password string) (AccessToken, *domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeUser", ctx, email, password)
	ret0, _ := ret[0].(AccessToken)
	ret1, _ := ret[1].(*domain.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthorizeUser indicates an expected call of AuthorizeUser.
func (mr *MockApplMockRecorder) AuthorizeUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockAppl)(nil).AuthorizeUser), ctx, email, password)
}

// CreateCategory mocks base method.
func (m *MockAppl) CreateCategory(ctx Ctx, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockApplMockRecorder) CreateCategory(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockAppl)(nil).CreateCategory), ctx, name)
}

// CreateIdentifier mocks base method.
func (m *MockAppl) CreateIdentifier(ctx Ctx, creatorID, categoryID, parentID int64, name, description, exampleText string, platforms []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentifier", ctx, creatorID, categoryID, parentID, name, description, exampleText, platforms)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentifier indicates an expected call of CreateIdentifier.
func (mr *MockApplMockRecorder) CreateIdentifier(ctx, creatorID, categoryID, parentID, name, description, exampleText, platforms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentifier", reflect.TypeOf((*MockAppl)(nil).CreateIdentifier), ctx, creatorID, categoryID, parentID, name, description, exampleText, platforms)
}

// CreateLocalization mocks base method.
func (m *MockAppl) CreateLocalization(ctx Ctx, creatorID int64, name, code, icon string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocalization", ctx, creatorID, name, code, icon)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLocalization indicates an expected call of CreateLocalization.
func (mr *MockApplMockRecorder) CreateLocalization(ctx, creatorID, name, code, icon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocalization", reflect.TypeOf((*MockAppl)(nil).CreateLocalization), ctx, creatorID, name, code, icon)
}

// CreateTranslation mocks base method.
func (m *MockAppl) CreateTranslation(ctx Ctx, creatorID, localizationID, identifierID int64, singular, plural string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslation", ctx, creatorID, localizationID, identifierID, singular, plural)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTranslation indicates an expected call of CreateTranslation.
func (mr *MockApplMockRecorder) CreateTranslation(ctx, creatorID, localizationID, identifierID, singular, plural interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslation", reflect.TypeOf((*MockAppl)(nil).CreateTranslation), ctx, creatorID, localizationID, identifierID, singular, plural)
}

// CreateTranslationFile mocks base method.
func (m *MockAppl) CreateTranslationFile(ctx Ctx, platform, storageType string, creatorID, localizationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslationFile", ctx, platform, storageType, creatorID, localizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTranslationFile indicates an expected call of CreateTranslationFile.
func (mr *MockApplMockRecorder) CreateTranslationFile(ctx, platform, storageType, creatorID, localizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslationFile", reflect.TypeOf((*MockAppl)(nil).CreateTranslationFile), ctx, platform, storageType, creatorID, localizationID)
}

// DeleteCategory mocks base method.
func (m *MockAppl) DeleteCategory(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockApplMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockAppl)(nil).DeleteCategory), ctx, id)
}

// DeleteIdentifier mocks base method.
func (m *MockAppl) DeleteIdentifier(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentifier", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentifier indicates an expected call of DeleteIdentifier.
func (mr *MockApplMockRecorder) DeleteIdentifier(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentifier", reflect.TypeOf((*MockAppl)(nil).DeleteIdentifier), ctx, id)
}

// DeleteLocalization mocks base method.
func (m *MockAppl) DeleteLocalization(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocalization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocalization indicates an expected call of DeleteLocalization.
func (mr *MockApplMockRecorder) DeleteLocalization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocalization", reflect.TypeOf((*MockAppl)(nil).DeleteLocalization), ctx, id)
}

// DeleteTranslation mocks base method.
func (m *MockAppl) DeleteTranslation(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslation indicates an expected call of DeleteTranslation.
func (mr *MockApplMockRecorder) DeleteTranslation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslation", reflect.TypeOf((*MockAppl)(nil).DeleteTranslation), ctx, id)
}

// DeleteTranslationFile mocks base method.
func (m *MockAppl) DeleteTranslationFile(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslationFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslationFile indicates an expected call of DeleteTranslationFile.
func (mr *MockApplMockRecorder) DeleteTranslationFile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslationFile", reflect.TypeOf((*MockAppl)(nil).DeleteTranslationFile), ctx, id)
}

// GetCategories mocks base method.
func (m *MockAppl) GetCategories(ctx Ctx) ([]*domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockApplMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockAppl)(nil).GetCategories), ctx)
}

// GetCurrentSettingState mocks base method.
func (m *MockAppl) GetCurrentSettingState() domain.SettingConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSettingState")
	ret0, _ := ret[0].(domain.SettingConfiguration)
	return ret0
}

// GetCurrentSettingState indicates an expected call of GetCurrentSettingState.
func (mr *MockApplMockRecorder) GetCurrentSettingState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSettingState", reflect.TypeOf((*MockAppl)(nil).GetCurrentSettingState))
}

// GetGroupedTranslations mocks base method.
func (m *MockAppl) GetGroupedTranslations(ctx Ctx, f filter.GroupedTranslationFilter) ([]*domain.GroupedTranslations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupedTranslations", ctx, f)
	ret0, _ := ret[0].([]*domain.GroupedTranslations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupedTranslations indicates an expected call of GetGroupedTranslations.
func (mr *MockApplMockRecorder) GetGroupedTranslations(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupedTranslations", reflect.TypeOf((*MockAppl)(nil).GetGroupedTranslations), ctx, f)
}

// GetIdentifiers mocks base method.
func (m *MockAppl) GetIdentifiers(ctx Ctx, f filter.IdentifierFilter) ([]*domain.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentifiers", ctx, f)
	ret0, _ := ret[0].([]*domain.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentifiers indicates an expected call of GetIdentifiers.
func (mr *MockApplMockRecorder) GetIdentifiers(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentifiers", reflect.TypeOf((*MockAppl)(nil).GetIdentifiers), ctx, f)
}

// GetLocalizations mocks base method.
func (m *MockAppl) GetLocalizations(ctx Ctx) ([]*domain.Localization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalizations", ctx)
	ret0, _ := ret[0].([]*domain.Localization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalizations indicates an expected call of GetLocalizations.
func (mr *MockApplMockRecorder) GetLocalizations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalizations", reflect.TypeOf((*MockAppl)(nil).GetLocalizations), ctx)
}

// GetStatistic mocks base method.
func (m *MockAppl) GetStatistic(ctx Ctx) (*domain.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic", ctx)
	ret0, _ := ret[0].(*domain.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockApplMockRecorder) GetStatistic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockAppl)(nil).GetStatistic), ctx)
}

// GetSupportedLanguages mocks base method.
func (m *MockAppl) GetSupportedLanguages(ctx Ctx) ([]translation.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages", ctx)
	ret0, _ := ret[0].([]translation.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockApplMockRecorder) GetSupportedLanguages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockAppl)(nil).GetSupportedLanguages), ctx)
}

// GetTranslation mocks base method.
func (m *MockAppl) GetTranslation(ctx Ctx, locale, identifierName string) (*domain.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslation", ctx, locale, identifierName)
	ret0, _ := ret[0].(*domain.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslation indicates an expected call of GetTranslation.
func (mr *MockApplMockRecorder) GetTranslation(ctx, locale, identifierName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslation", reflect.TypeOf((*MockAppl)(nil).GetTranslation), ctx, locale, identifierName)
}

// GetTranslationFiles mocks base method.
func (m *MockAppl) GetTranslationFiles(ctx Ctx, f filter.TranslationFileFilter) ([]*domain.TranslationFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationFiles", ctx, f)
	ret0, _ := ret[0].([]*domain.TranslationFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationFiles indicates an expected call of GetTranslationFiles.
func (mr *MockApplMockRecorder) GetTranslationFiles(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationFiles", reflect.TypeOf((*MockAppl)(nil).GetTranslationFiles), ctx, f)
}

// GetTranslations mocks base method.
func (m *MockAppl) GetTranslations(ctx Ctx, f filter.TranslationFilter) ([]*domain.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslations", ctx, f)
	ret0, _ := ret[0].([]*domain.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslations indicates an expected call of GetTranslations.
func (mr *MockApplMockRecorder) GetTranslations(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslations", reflect.TypeOf((*MockAppl)(nil).GetTranslations), ctx, f)
}

// GetUserByEmail mocks base method.
func (m *MockAppl) GetUserByEmail(ctx Ctx, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockApplMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAppl)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAppl) GetUserByID(ctx Ctx, userID int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockApplMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAppl)(nil).GetUserByID), ctx, userID)
}

// GetUserByUUID mocks base method.
func (m *MockAppl) GetUserByUUID(ctx Ctx, uuid string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, uuid)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockApplMockRecorder) GetUserByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockAppl)(nil).GetUserByUUID), ctx, uuid)
}

// GetUsers mocks base method.
func (m *MockAppl) GetUsers(ctx Ctx) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockApplMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAppl)(nil).GetUsers), ctx)
}

// GetVersion mocks base method.
func (m *MockAppl) GetVersion(ctx Ctx, localizationID, platform int64) ([]*domain.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx, localizationID, platform)
	ret0, _ := ret[0].([]*domain.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockApplMockRecorder) GetVersion(ctx, localizationID, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAppl)(nil).GetVersion), ctx, localizationID, platform)
}

// HealthCheck mocks base method.
func (m *MockAppl) HealthCheck(arg0 Ctx) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockApplMockRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAppl)(nil).HealthCheck), arg0)
}

// LogoutUser mocks base method.
func (m *MockAppl) LogoutUser(ctx Ctx, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockApplMockRecorder) LogoutUser(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAppl)(nil).LogoutUser), ctx, token)
}

// RegisterUser mocks base method.
func (m *MockAppl) RegisterUser(ctx Ctx, email, password, firstName, secondName string, role int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, email, password, firstName, secondName, role)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockApplMockRecorder) RegisterUser(ctx, email, password, firstName, secondName, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAppl)(nil).RegisterUser), ctx, email, password, firstName, secondName, role)
}

// SetStorageConfiguration mocks base method.
func (m *MockAppl) SetStorageConfiguration(ctx Ctx, data domain.StorageConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorageConfiguration", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStorageConfiguration indicates an expected call of SetStorageConfiguration.
func (mr *MockApplMockRecorder) SetStorageConfiguration(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorageConfiguration", reflect.TypeOf((*MockAppl)(nil).SetStorageConfiguration), ctx, data)
}

// SetTranslationConfiguration mocks base method.
func (m *MockAppl) SetTranslationConfiguration(ctx Ctx, data domain.TranslationConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTranslationConfiguration", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTranslationConfiguration indicates an expected call of SetTranslationConfiguration.
func (mr *MockApplMockRecorder) SetTranslationConfiguration(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTranslationConfiguration", reflect.TypeOf((*MockAppl)(nil).SetTranslationConfiguration), ctx, data)
}

// Translate mocks base method.
func (m *MockAppl) Translate(ctx Ctx, text string, source, target language.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, text, source, target)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockApplMockRecorder) Translate(ctx, text, source, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockAppl)(nil).Translate), ctx, text, source, target)
}

// UpdateCategory mocks base method.
func (m *MockAppl) UpdateCategory(ctx Ctx, id int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockApplMockRecorder) UpdateCategory(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockAppl)(nil).UpdateCategory), ctx, id, name)
}

// UpdateIdentifier mocks base method.
func (m *MockAppl) UpdateIdentifier(ctx Ctx, id, categoryID, parentID int64, name, description, exampleText string, platforms []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentifier", ctx, id, categoryID, parentID, name, description, exampleText, platforms)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentifier indicates an expected call of UpdateIdentifier.
func (mr *MockApplMockRecorder) UpdateIdentifier(ctx, id, categoryID, parentID, name, description, exampleText, platforms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentifier", reflect.TypeOf((*MockAppl)(nil).UpdateIdentifier), ctx, id, categoryID, parentID, name, description, exampleText, platforms)
}

// UpdatePassword mocks base method.
func (m *MockAppl) UpdatePassword(ctx Ctx, userID int64, changePassword domain.ChangePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, changePassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockApplMockRecorder) UpdatePassword(ctx, userID, changePassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockAppl)(nil).UpdatePassword), ctx, userID, changePassword)
}

// UpdateProfile mocks base method.
func (m *MockAppl) UpdateProfile(ctx Ctx, userID int64, email, firstName, secondName string, role, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userID, email, firstName, secondName, role, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockApplMockRecorder) UpdateProfile(ctx, userID, email, firstName, secondName, role, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockAppl)(nil).UpdateProfile), ctx, userID, email, firstName, secondName, role, status)
}

// UpdateStatus mocks base method.
func (m *MockAppl) UpdateStatus(ctx Ctx, userID, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, userID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockApplMockRecorder) UpdateStatus(ctx, userID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAppl)(nil).UpdateStatus), ctx, userID, status)
}

// UpdateStatusTranslation mocks base method.
func (m *MockAppl) UpdateStatusTranslation(ctx Ctx, id, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusTranslation", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusTranslation indicates an expected call of UpdateStatusTranslation.
func (mr *MockApplMockRecorder) UpdateStatusTranslation(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusTranslation", reflect.TypeOf((*MockAppl)(nil).UpdateStatusTranslation), ctx, id, status)
}

// UpdateTranslation mocks base method.
func (m *MockAppl) UpdateTranslation(ctx Ctx, id int64, singular, plural string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTranslation", ctx, id, singular, plural)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTranslation indicates an expected call of UpdateTranslation.
func (mr *MockApplMockRecorder) UpdateTranslation(ctx, id, singular, plural interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTranslation", reflect.TypeOf((*MockAppl)(nil).UpdateTranslation), ctx, id, singular, plural)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GenerateAuthToken mocks base method.
func (m *MockAuth) GenerateAuthToken(userUUID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthToken", userUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthToken indicates an expected call of GenerateAuthToken.
func (mr *MockAuthMockRecorder) GenerateAuthToken(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthToken", reflect.TypeOf((*MockAuth)(nil).GenerateAuthToken), userUUID)
}

// IsAuthorized mocks base method.
func (m *MockAuth) IsAuthorized(token string) (*UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", token)
	ret0, _ := ret[0].(*UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockAuthMockRecorder) IsAuthorized(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAuth)(nil).IsAuthorized), token)
}

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockRepo) CreateCategory(ctx Ctx, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockRepoMockRecorder) CreateCategory(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockRepo)(nil).CreateCategory), ctx, name)
}

// CreateIdentifier mocks base method.
func (m *MockRepo) CreateIdentifier(ctx Ctx, createID, categoryID, parentID int64, name, description, exampleText, platforms string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentifier", ctx, createID, categoryID, parentID, name, description, exampleText, platforms)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentifier indicates an expected call of CreateIdentifier.
func (mr *MockRepoMockRecorder) CreateIdentifier(ctx, createID, categoryID, parentID, name, description, exampleText, platforms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentifier", reflect.TypeOf((*MockRepo)(nil).CreateIdentifier), ctx, createID, categoryID, parentID, name, description, exampleText, platforms)
}

// CreateLocalization mocks base method.
func (m *MockRepo) CreateLocalization(ctx Ctx, creatorID int64, locale, languageName, icon string) (*dao.Localization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocalization", ctx, creatorID, locale, languageName, icon)
	ret0, _ := ret[0].(*dao.Localization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocalization indicates an expected call of CreateLocalization.
func (mr *MockRepoMockRecorder) CreateLocalization(ctx, creatorID, locale, languageName, icon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocalization", reflect.TypeOf((*MockRepo)(nil).CreateLocalization), ctx, creatorID, locale, languageName, icon)
}

// CreateTranslation mocks base method.
func (m *MockRepo) CreateTranslation(ctx Ctx, creatorID, localizationID, identifierID int64, singular, plural string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslation", ctx, creatorID, localizationID, identifierID, singular, plural)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTranslation indicates an expected call of CreateTranslation.
func (mr *MockRepoMockRecorder) CreateTranslation(ctx, creatorID, localizationID, identifierID, singular, plural interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslation", reflect.TypeOf((*MockRepo)(nil).CreateTranslation), ctx, creatorID, localizationID, identifierID, singular, plural)
}

// CreateTranslationFile mocks base method.
func (m *MockRepo) CreateTranslationFile(ctx Ctx, name, path, s3fileID, s3bucket string, platform, storageType, creatorID, localizationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslationFile", ctx, name, path, s3fileID, s3bucket, platform, storageType, creatorID, localizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTranslationFile indicates an expected call of CreateTranslationFile.
func (mr *MockRepoMockRecorder) CreateTranslationFile(ctx, name, path, s3fileID, s3bucket, platform, storageType, creatorID, localizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslationFile", reflect.TypeOf((*MockRepo)(nil).CreateTranslationFile), ctx, name, path, s3fileID, s3bucket, platform, storageType, creatorID, localizationID)
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(ctx Ctx, email, password, firstName, secondName string, role int64) (*dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, password, firstName, secondName, role)
	ret0, _ := ret[0].(*dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(ctx, email, password, firstName, secondName, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), ctx, email, password, firstName, secondName, role)
}

// DeleteCategory mocks base method.
func (m *MockRepo) DeleteCategory(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockRepoMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockRepo)(nil).DeleteCategory), ctx, id)
}

// DeleteIdentifier mocks base method.
func (m *MockRepo) DeleteIdentifier(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentifier", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentifier indicates an expected call of DeleteIdentifier.
func (mr *MockRepoMockRecorder) DeleteIdentifier(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentifier", reflect.TypeOf((*MockRepo)(nil).DeleteIdentifier), ctx, id)
}

// DeleteLocalization mocks base method.
func (m *MockRepo) DeleteLocalization(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocalization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocalization indicates an expected call of DeleteLocalization.
func (mr *MockRepoMockRecorder) DeleteLocalization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocalization", reflect.TypeOf((*MockRepo)(nil).DeleteLocalization), ctx, id)
}

// DeleteSession mocks base method.
func (m *MockRepo) DeleteSession(ctx Ctx, token AccessToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockRepoMockRecorder) DeleteSession(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepo)(nil).DeleteSession), ctx, token)
}

// DeleteTranslation mocks base method.
func (m *MockRepo) DeleteTranslation(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslation indicates an expected call of DeleteTranslation.
func (mr *MockRepoMockRecorder) DeleteTranslation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslation", reflect.TypeOf((*MockRepo)(nil).DeleteTranslation), ctx, id)
}

// DeleteTranslationFile mocks base method.
func (m *MockRepo) DeleteTranslationFile(ctx Ctx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslationFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslationFile indicates an expected call of DeleteTranslationFile.
func (mr *MockRepoMockRecorder) DeleteTranslationFile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslationFile", reflect.TypeOf((*MockRepo)(nil).DeleteTranslationFile), ctx, id)
}

// GetCategories mocks base method.
func (m *MockRepo) GetCategories(ctx Ctx) ([]*dao.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]*dao.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockRepoMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockRepo)(nil).GetCategories), ctx)
}

// GetDB mocks base method.
func (m *MockRepo) GetDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockRepoMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockRepo)(nil).GetDB))
}

// GetGroupedTranslations mocks base method.
func (m *MockRepo) GetGroupedTranslations(ctx Ctx, f filter.GroupedTranslationFilter) (map[string][]*dao.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupedTranslations", ctx, f)
	ret0, _ := ret[0].(map[string][]*dao.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupedTranslations indicates an expected call of GetGroupedTranslations.
func (mr *MockRepoMockRecorder) GetGroupedTranslations(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupedTranslations", reflect.TypeOf((*MockRepo)(nil).GetGroupedTranslations), ctx, f)
}

// GetIdentifiers mocks base method.
func (m *MockRepo) GetIdentifiers(ctx Ctx, f filter.IdentifierFilter) ([]*dao.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentifiers", ctx, f)
	ret0, _ := ret[0].([]*dao.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentifiers indicates an expected call of GetIdentifiers.
func (mr *MockRepoMockRecorder) GetIdentifiers(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentifiers", reflect.TypeOf((*MockRepo)(nil).GetIdentifiers), ctx, f)
}

// GetLocalization mocks base method.
func (m *MockRepo) GetLocalization(ctx Ctx, id int64) (*dao.Localization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalization", ctx, id)
	ret0, _ := ret[0].(*dao.Localization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalization indicates an expected call of GetLocalization.
func (mr *MockRepoMockRecorder) GetLocalization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalization", reflect.TypeOf((*MockRepo)(nil).GetLocalization), ctx, id)
}

// GetLocalizations mocks base method.
func (m *MockRepo) GetLocalizations(ctx Ctx) ([]*dao.Localization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalizations", ctx)
	ret0, _ := ret[0].([]*dao.Localization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalizations indicates an expected call of GetLocalizations.
func (mr *MockRepoMockRecorder) GetLocalizations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalizations", reflect.TypeOf((*MockRepo)(nil).GetLocalizations), ctx)
}

// GetStatistic mocks base method.
func (m *MockRepo) GetStatistic(ctx Ctx) (*dao.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic", ctx)
	ret0, _ := ret[0].(*dao.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockRepoMockRecorder) GetStatistic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockRepo)(nil).GetStatistic), ctx)
}

// GetTranslation mocks base method.
func (m *MockRepo) GetTranslation(ctx Ctx, locale, identifierName string) (*dao.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslation", ctx, locale, identifierName)
	ret0, _ := ret[0].(*dao.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslation indicates an expected call of GetTranslation.
func (mr *MockRepoMockRecorder) GetTranslation(ctx, locale, identifierName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslation", reflect.TypeOf((*MockRepo)(nil).GetTranslation), ctx, locale, identifierName)
}

// GetTranslationFile mocks base method.
func (m *MockRepo) GetTranslationFile(ctx Ctx, id int64) (*dao.TranslationFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationFile", ctx, id)
	ret0, _ := ret[0].(*dao.TranslationFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationFile indicates an expected call of GetTranslationFile.
func (mr *MockRepoMockRecorder) GetTranslationFile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationFile", reflect.TypeOf((*MockRepo)(nil).GetTranslationFile), ctx, id)
}

// GetTranslationFiles mocks base method.
func (m *MockRepo) GetTranslationFiles(ctx Ctx, f filter.TranslationFileFilter) ([]*dao.TranslationFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationFiles", ctx, f)
	ret0, _ := ret[0].([]*dao.TranslationFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationFiles indicates an expected call of GetTranslationFiles.
func (mr *MockRepoMockRecorder) GetTranslationFiles(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationFiles", reflect.TypeOf((*MockRepo)(nil).GetTranslationFiles), ctx, f)
}

// GetTranslations mocks base method.
func (m *MockRepo) GetTranslations(ctx Ctx, f filter.TranslationFilter) ([]*dao.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslations", ctx, f)
	ret0, _ := ret[0].([]*dao.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslations indicates an expected call of GetTranslations.
func (mr *MockRepoMockRecorder) GetTranslations(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslations", reflect.TypeOf((*MockRepo)(nil).GetTranslations), ctx, f)
}

// GetUserByEmail mocks base method.
func (m *MockRepo) GetUserByEmail(email string) (*dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepoMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepo)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockRepo) GetUserByID(id int64) (*dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepoMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepo)(nil).GetUserByID), id)
}

// GetUserByUserUUID mocks base method.
func (m *MockRepo) GetUserByUserUUID(userUUID string) (*dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserUUID", userUUID)
	ret0, _ := ret[0].(*dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserUUID indicates an expected call of GetUserByUserUUID.
func (mr *MockRepoMockRecorder) GetUserByUserUUID(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserUUID", reflect.TypeOf((*MockRepo)(nil).GetUserByUserUUID), userUUID)
}

// GetUsers mocks base method.
func (m *MockRepo) GetUsers(ctx Ctx) ([]*dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepoMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepo)(nil).GetUsers), ctx)
}

// GetVersionFromTranslationFiles mocks base method.
func (m *MockRepo) GetVersionFromTranslationFiles(ctx Ctx, f filter.VersionTranslationFilesFilter) ([]*dao.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionFromTranslationFiles", ctx, f)
	ret0, _ := ret[0].([]*dao.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionFromTranslationFiles indicates an expected call of GetVersionFromTranslationFiles.
func (mr *MockRepoMockRecorder) GetVersionFromTranslationFiles(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionFromTranslationFiles", reflect.TypeOf((*MockRepo)(nil).GetVersionFromTranslationFiles), ctx, f)
}

// GetVersionFromTranslations mocks base method.
func (m *MockRepo) GetVersionFromTranslations(ctx Ctx, f filter.VersionTranslationsFilter) ([]*dao.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionFromTranslations", ctx, f)
	ret0, _ := ret[0].([]*dao.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionFromTranslations indicates an expected call of GetVersionFromTranslations.
func (mr *MockRepoMockRecorder) GetVersionFromTranslations(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionFromTranslations", reflect.TypeOf((*MockRepo)(nil).GetVersionFromTranslations), ctx, f)
}

// SaveSession mocks base method.
func (m *MockRepo) SaveSession(ctx Ctx, userID int64, token AccessToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", ctx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockRepoMockRecorder) SaveSession(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockRepo)(nil).SaveSession), ctx, userID, token)
}

// SessionByAccessToken mocks base method.
func (m *MockRepo) SessionByAccessToken(ctx Ctx, token AccessToken) (*dao.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionByAccessToken", ctx, token)
	ret0, _ := ret[0].(*dao.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionByAccessToken indicates an expected call of SessionByAccessToken.
func (mr *MockRepoMockRecorder) SessionByAccessToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionByAccessToken", reflect.TypeOf((*MockRepo)(nil).SessionByAccessToken), ctx, token)
}

// UpdateCategory mocks base method.
func (m *MockRepo) UpdateCategory(ctx Ctx, id int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockRepoMockRecorder) UpdateCategory(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepo)(nil).UpdateCategory), ctx, id, name)
}

// UpdateIdentifier mocks base method.
func (m *MockRepo) UpdateIdentifier(ctx Ctx, id, categoryID, parentID int64, name, description, exampleText, platforms string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentifier", ctx, id, categoryID, parentID, name, description, exampleText, platforms)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentifier indicates an expected call of UpdateIdentifier.
func (mr *MockRepoMockRecorder) UpdateIdentifier(ctx, id, categoryID, parentID, name, description, exampleText, platforms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentifier", reflect.TypeOf((*MockRepo)(nil).UpdateIdentifier), ctx, id, categoryID, parentID, name, description, exampleText, platforms)
}

// UpdatePassword mocks base method.
func (m *MockRepo) UpdatePassword(ctx Ctx, userID int64, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepoMockRecorder) UpdatePassword(ctx, userID, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepo)(nil).UpdatePassword), ctx, userID, passwordHash)
}

// UpdateProfile mocks base method.
func (m *MockRepo) UpdateProfile(ctx Ctx, userID int64, email, firstName, secondName string, role, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userID, email, firstName, secondName, role, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockRepoMockRecorder) UpdateProfile(ctx, userID, email, firstName, secondName, role, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRepo)(nil).UpdateProfile), ctx, userID, email, firstName, secondName, role, status)
}

// UpdateStatus mocks base method.
func (m *MockRepo) UpdateStatus(ctx Ctx, userID, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, userID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRepoMockRecorder) UpdateStatus(ctx, userID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRepo)(nil).UpdateStatus), ctx, userID, status)
}

// UpdateStatusTranslation mocks base method.
func (m *MockRepo) UpdateStatusTranslation(ctx Ctx, id, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusTranslation", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusTranslation indicates an expected call of UpdateStatusTranslation.
func (mr *MockRepoMockRecorder) UpdateStatusTranslation(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusTranslation", reflect.TypeOf((*MockRepo)(nil).UpdateStatusTranslation), ctx, id, status)
}

// UpdateTranslation mocks base method.
func (m *MockRepo) UpdateTranslation(ctx Ctx, id int64, singular, plural string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTranslation", ctx, id, singular, plural)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTranslation indicates an expected call of UpdateTranslation.
func (mr *MockRepoMockRecorder) UpdateTranslation(ctx, id, singular, plural interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTranslation", reflect.TypeOf((*MockRepo)(nil).UpdateTranslation), ctx, id, singular, plural)
}

// MockSettingRepo is a mock of SettingRepo interface.
type MockSettingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSettingRepoMockRecorder
}

// MockSettingRepoMockRecorder is the mock recorder for MockSettingRepo.
type MockSettingRepoMockRecorder struct {
	mock *MockSettingRepo
}

// NewMockSettingRepo creates a new mock instance.
func NewMockSettingRepo(ctrl *gomock.Controller) *MockSettingRepo {
	mock := &MockSettingRepo{ctrl: ctrl}
	mock.recorder = &MockSettingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingRepo) EXPECT() *MockSettingRepoMockRecorder {
	return m.recorder
}

// GetCurrentSettingState mocks base method.
func (m *MockSettingRepo) GetCurrentSettingState() domain.SettingConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSettingState")
	ret0, _ := ret[0].(domain.SettingConfiguration)
	return ret0
}

// GetCurrentSettingState indicates an expected call of GetCurrentSettingState.
func (mr *MockSettingRepoMockRecorder) GetCurrentSettingState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSettingState", reflect.TypeOf((*MockSettingRepo)(nil).GetCurrentSettingState))
}

// SetStorageConfiguration mocks base method.
func (m *MockSettingRepo) SetStorageConfiguration(ctx Ctx, data domain.StorageConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorageConfiguration", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStorageConfiguration indicates an expected call of SetStorageConfiguration.
func (mr *MockSettingRepoMockRecorder) SetStorageConfiguration(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorageConfiguration", reflect.TypeOf((*MockSettingRepo)(nil).SetStorageConfiguration), ctx, data)
}

// SetTranslationConfiguration mocks base method.
func (m *MockSettingRepo) SetTranslationConfiguration(ctx Ctx, data domain.TranslationConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTranslationConfiguration", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTranslationConfiguration indicates an expected call of SetTranslationConfiguration.
func (mr *MockSettingRepoMockRecorder) SetTranslationConfiguration(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTranslationConfiguration", reflect.TypeOf((*MockSettingRepo)(nil).SetTranslationConfiguration), ctx, data)
}

// MockPassword is a mock of Password interface.
type MockPassword struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordMockRecorder
}

// MockPasswordMockRecorder is the mock recorder for MockPassword.
type MockPasswordMockRecorder struct {
	mock *MockPassword
}

// NewMockPassword creates a new mock instance.
func NewMockPassword(ctrl *gomock.Controller) *MockPassword {
	mock := &MockPassword{ctrl: ctrl}
	mock.recorder = &MockPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassword) EXPECT() *MockPasswordMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockPassword) Compare(hashedPassword, password []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockPasswordMockRecorder) Compare(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockPassword)(nil).Compare), hashedPassword, password)
}

// Generate mocks base method.
func (m *MockPassword) Generate(length int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", length)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockPasswordMockRecorder) Generate(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPassword)(nil).Generate), length)
}

// Hashing mocks base method.
func (m *MockPassword) Hashing(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashing", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashing indicates an expected call of Hashing.
func (mr *MockPasswordMockRecorder) Hashing(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashing", reflect.TypeOf((*MockPassword)(nil).Hashing), password)
}
