// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/translation/iface.go

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	domain "github.com/freonservice/freon/internal/domain"
	gomock "github.com/golang/mock/gomock"
	language "golang.org/x/text/language"
)

// MockTranslation is a mock of Translation interface.
type MockTranslation struct {
	ctrl     *gomock.Controller
	recorder *MockTranslationMockRecorder
}

// MockTranslationMockRecorder is the mock recorder for MockTranslation.
type MockTranslationMockRecorder struct {
	mock *MockTranslation
}

// NewMockTranslation creates a new mock instance.
func NewMockTranslation(ctrl *gomock.Controller) *MockTranslation {
	mock := &MockTranslation{ctrl: ctrl}
	mock.recorder = &MockTranslationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslation) EXPECT() *MockTranslationMockRecorder {
	return m.recorder
}

// Languages mocks base method.
func (m *MockTranslation) Languages(ctx context.Context) ([]*domain.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Languages", ctx)
	ret0, _ := ret[0].([]*domain.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Languages indicates an expected call of Languages.
func (mr *MockTranslationMockRecorder) Languages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Languages", reflect.TypeOf((*MockTranslation)(nil).Languages), ctx)
}

// Translate mocks base method.
func (m *MockTranslation) Translate(ctx context.Context, text string, source, target language.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, text, source, target)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockTranslationMockRecorder) Translate(ctx, text, source, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockTranslation)(nil).Translate), ctx, text, source, target)
}
