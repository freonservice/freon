// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package dao

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type identifierTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *identifierTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("identifiers").
func (v *identifierTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *identifierTableType) Columns() []string {
	return []string{"id", "parent_path", "name", "description", "example_text", "creator_id", "category_id", "status", "platforms", "named_list", "created_at", "updated_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *identifierTableType) NewStruct() reform.Struct {
	return new(Identifier)
}

// NewRecord makes a new record for that table.
func (v *identifierTableType) NewRecord() reform.Record {
	return new(Identifier)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *identifierTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// IdentifierTable represents identifiers view or table in SQL database.
var IdentifierTable = &identifierTableType{
	s: parse.StructInfo{Type: "Identifier", SQLSchema: "", SQLName: "identifiers", Fields: []parse.FieldInfo{{Name: "ID", Type: "int64", Column: "id"}, {Name: "ParentPath", Type: "string", Column: "parent_path"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "Description", Type: "sql.NullString", Column: "description"}, {Name: "ExampleText", Type: "sql.NullString", Column: "example_text"}, {Name: "CreatorID", Type: "int64", Column: "creator_id"}, {Name: "CategoryID", Type: "sql.NullInt64", Column: "category_id"}, {Name: "Status", Type: "int64", Column: "status"}, {Name: "Platforms", Type: "string", Column: "platforms"}, {Name: "NamedList", Type: "sql.NullString", Column: "named_list"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "UpdatedAt", Type: "*time.Time", Column: "updated_at"}}, PKFieldIndex: 0},
	z: new(Identifier).Values(),
}

// String returns a string representation of this struct or record.
func (s Identifier) String() string {
	res := make([]string, 12)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "ParentPath: " + reform.Inspect(s.ParentPath, true)
	res[2] = "Name: " + reform.Inspect(s.Name, true)
	res[3] = "Description: " + reform.Inspect(s.Description, true)
	res[4] = "ExampleText: " + reform.Inspect(s.ExampleText, true)
	res[5] = "CreatorID: " + reform.Inspect(s.CreatorID, true)
	res[6] = "CategoryID: " + reform.Inspect(s.CategoryID, true)
	res[7] = "Status: " + reform.Inspect(s.Status, true)
	res[8] = "Platforms: " + reform.Inspect(s.Platforms, true)
	res[9] = "NamedList: " + reform.Inspect(s.NamedList, true)
	res[10] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[11] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Identifier) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.ParentPath,
		s.Name,
		s.Description,
		s.ExampleText,
		s.CreatorID,
		s.CategoryID,
		s.Status,
		s.Platforms,
		s.NamedList,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Identifier) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.ParentPath,
		&s.Name,
		&s.Description,
		&s.ExampleText,
		&s.CreatorID,
		&s.CategoryID,
		&s.Status,
		&s.Platforms,
		&s.NamedList,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Identifier) View() reform.View {
	return IdentifierTable
}

// Table returns Table object for that record.
func (s *Identifier) Table() reform.Table {
	return IdentifierTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Identifier) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Identifier) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Identifier) HasPK() bool {
	return s.ID != IdentifierTable.z[IdentifierTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Identifier) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int64(i64)
	} else {
		s.ID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = IdentifierTable
	_ reform.Struct = (*Identifier)(nil)
	_ reform.Table  = IdentifierTable
	_ reform.Record = (*Identifier)(nil)
	_ fmt.Stringer  = (*Identifier)(nil)
)

func init() {
	parse.AssertUpToDate(&IdentifierTable.s, new(Identifier))
}
