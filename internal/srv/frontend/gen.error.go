// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package frontend

import (
	"net/http"

	"github.com/MarcSky/freon/api/openapi/frontend/model"
	"github.com/MarcSky/freon/api/openapi/frontend/restapi/op"
	"github.com/MarcSky/freon/pkg/def"
	"github.com/go-openapi/swag"
)

func errLogin(log Log, err error, code errCode) op.LoginResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewLoginDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errLogoutUser(log Log, err error, code errCode) op.LogoutUserResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewLogoutUserDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errRegUser(log Log, err error, code errCode) op.RegUserResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewRegUserDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errCreateLocalization(log Log, err error, code errCode) op.CreateLocalizationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewCreateLocalizationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errUserMe(log Log, err error, code errCode) op.UserMeResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewUserMeDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errListLocalization(log Log, err error, code errCode) op.ListLocalizationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewListLocalizationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errDeleteLocalization(log Log, err error, code errCode) op.DeleteLocalizationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewDeleteLocalizationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errCreateIdentifier(log Log, err error, code errCode) op.CreateIdentifierResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewCreateIdentifierDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errListIdentifiers(log Log, err error, code errCode) op.ListIdentifiersResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewListIdentifiersDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errDeleteIdentifier(log Log, err error, code errCode) op.DeleteIdentifierResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewDeleteIdentifierDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errCreateCategory(log Log, err error, code errCode) op.CreateCategoryResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewCreateCategoryDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errListCategories(log Log, err error, code errCode) op.ListCategoriesResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewListCategoriesDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errDeleteCategory(log Log, err error, code errCode) op.DeleteCategoryResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewDeleteCategoryDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errUpdateCategory(log Log, err error, code errCode) op.UpdateCategoryResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewUpdateCategoryDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errUpdateIdentifier(log Log, err error, code errCode) op.UpdateIdentifierResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewUpdateIdentifierDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errCreateTranslation(log Log, err error, code errCode) op.CreateTranslationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewCreateTranslationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errListTranslations(log Log, err error, code errCode) op.ListTranslationsResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewListTranslationsDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errDeleteTranslation(log Log, err error, code errCode) op.DeleteTranslationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewDeleteTranslationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errUpdateTranslation(log Log, err error, code errCode) op.UpdateTranslationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewUpdateTranslationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errHideTranslation(log Log, err error, code errCode) op.HideTranslationResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewHideTranslationDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errUserChangePassword(log Log, err error, code errCode) op.UserChangePasswordResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewUserChangePasswordDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errUserChangeProfile(log Log, err error, code errCode) op.UserChangeProfileResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewUserChangeProfileDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errListUser(log Log, err error, code errCode) op.ListUserResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewListUserDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}

func errStatistic(log Log, err error, code errCode) op.StatisticResponder {
	if code.status < http.StatusInternalServerError {
		log.Info("client error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	} else {
		log.PrintErr("server error", def.LogHTTPStatus, code.status, "code", code.status, "err", err)
	}

	msg := err.Error()
	if code.status == http.StatusInternalServerError {
		msg = "internal error" //nolint:goconst // Duplicated by go:generate.
	}

	return op.NewStatisticDefault(code.status).WithPayload(&model.Error{
		Code:    swag.Int32(int32(code.status)),
		Message: swag.String(msg),
	})
}
